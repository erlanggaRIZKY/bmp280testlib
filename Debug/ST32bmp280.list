
ST32bmp280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d04  08005d04  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d0c  08005d0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000070  08005d84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08005d84  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      000000a7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ed7b  00000000  00000000  00020147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004600  00000000  00000000  0003eec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  000434c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  00044408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a6f  00000000  00000000  00045180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010617  00000000  00000000  0006bbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed50d  00000000  00000000  0007c206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036fc  00000000  00000000  00169714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002fd2  00000000  00000000  0016ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <deregister_tm_clones>:
 8000190:	4803      	ldr	r0, [pc, #12]	; (80001a0 <deregister_tm_clones+0x10>)
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x14>)
 8000194:	4283      	cmp	r3, r0
 8000196:	d002      	beq.n	800019e <deregister_tm_clones+0xe>
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <deregister_tm_clones+0x18>)
 800019a:	b103      	cbz	r3, 800019e <deregister_tm_clones+0xe>
 800019c:	4718      	bx	r3
 800019e:	4770      	bx	lr
 80001a0:	20000070 	.word	0x20000070
 80001a4:	20000070 	.word	0x20000070
 80001a8:	00000000 	.word	0x00000000

080001ac <register_tm_clones>:
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <register_tm_clones+0x18>)
 80001ae:	4906      	ldr	r1, [pc, #24]	; (80001c8 <register_tm_clones+0x1c>)
 80001b0:	1a0b      	subs	r3, r1, r0
 80001b2:	0fd9      	lsrs	r1, r3, #31
 80001b4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b8:	1049      	asrs	r1, r1, #1
 80001ba:	d002      	beq.n	80001c2 <register_tm_clones+0x16>
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <register_tm_clones+0x20>)
 80001be:	b103      	cbz	r3, 80001c2 <register_tm_clones+0x16>
 80001c0:	4718      	bx	r3
 80001c2:	4770      	bx	lr
 80001c4:	20000070 	.word	0x20000070
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c06      	ldr	r4, [pc, #24]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b943      	cbnz	r3, 80001ea <__do_global_dtors_aux+0x1a>
 80001d8:	f7ff ffda 	bl	8000190 <deregister_tm_clones>
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	b113      	cbz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x24>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	2301      	movs	r3, #1
 80001e8:	7023      	strb	r3, [r4, #0]
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000070 	.word	0x20000070
 80001f0:	00000000 	.word	0x00000000
 80001f4:	08005bb8 	.word	0x08005bb8

080001f8 <frame_dummy>:
 80001f8:	b508      	push	{r3, lr}
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <frame_dummy+0x14>)
 80001fc:	b11b      	cbz	r3, 8000206 <frame_dummy+0xe>
 80001fe:	4904      	ldr	r1, [pc, #16]	; (8000210 <frame_dummy+0x18>)
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <frame_dummy+0x1c>)
 8000202:	f3af 8000 	nop.w
 8000206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020a:	e7cf      	b.n	80001ac <register_tm_clones>
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08005bb8 	.word	0x08005bb8

08000218 <__errno>:
 8000218:	4b01      	ldr	r3, [pc, #4]	; (8000220 <__errno+0x8>)
 800021a:	6818      	ldr	r0, [r3, #0]
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000000 	.word	0x20000000

08000224 <__libc_init_array>:
 8000224:	b570      	push	{r4, r5, r6, lr}
 8000226:	4e0d      	ldr	r6, [pc, #52]	; (800025c <__libc_init_array+0x38>)
 8000228:	4d0d      	ldr	r5, [pc, #52]	; (8000260 <__libc_init_array+0x3c>)
 800022a:	1b76      	subs	r6, r6, r5
 800022c:	10b6      	asrs	r6, r6, #2
 800022e:	d006      	beq.n	800023e <__libc_init_array+0x1a>
 8000230:	2400      	movs	r4, #0
 8000232:	3401      	adds	r4, #1
 8000234:	f855 3b04 	ldr.w	r3, [r5], #4
 8000238:	4798      	blx	r3
 800023a:	42a6      	cmp	r6, r4
 800023c:	d1f9      	bne.n	8000232 <__libc_init_array+0xe>
 800023e:	4e09      	ldr	r6, [pc, #36]	; (8000264 <__libc_init_array+0x40>)
 8000240:	4d09      	ldr	r5, [pc, #36]	; (8000268 <__libc_init_array+0x44>)
 8000242:	1b76      	subs	r6, r6, r5
 8000244:	f005 fcb8 	bl	8005bb8 <_init>
 8000248:	10b6      	asrs	r6, r6, #2
 800024a:	d006      	beq.n	800025a <__libc_init_array+0x36>
 800024c:	2400      	movs	r4, #0
 800024e:	3401      	adds	r4, #1
 8000250:	f855 3b04 	ldr.w	r3, [r5], #4
 8000254:	4798      	blx	r3
 8000256:	42a6      	cmp	r6, r4
 8000258:	d1f9      	bne.n	800024e <__libc_init_array+0x2a>
 800025a:	bd70      	pop	{r4, r5, r6, pc}
 800025c:	08005d0c 	.word	0x08005d0c
 8000260:	08005d0c 	.word	0x08005d0c
 8000264:	08005d10 	.word	0x08005d10
 8000268:	08005d0c 	.word	0x08005d0c

0800026c <memset>:
 800026c:	b4f0      	push	{r4, r5, r6, r7}
 800026e:	0786      	lsls	r6, r0, #30
 8000270:	d046      	beq.n	8000300 <memset+0x94>
 8000272:	1e54      	subs	r4, r2, #1
 8000274:	2a00      	cmp	r2, #0
 8000276:	d03c      	beq.n	80002f2 <memset+0x86>
 8000278:	b2ca      	uxtb	r2, r1
 800027a:	4603      	mov	r3, r0
 800027c:	e002      	b.n	8000284 <memset+0x18>
 800027e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8000282:	d336      	bcc.n	80002f2 <memset+0x86>
 8000284:	f803 2b01 	strb.w	r2, [r3], #1
 8000288:	079d      	lsls	r5, r3, #30
 800028a:	d1f8      	bne.n	800027e <memset+0x12>
 800028c:	2c03      	cmp	r4, #3
 800028e:	d929      	bls.n	80002e4 <memset+0x78>
 8000290:	b2cd      	uxtb	r5, r1
 8000292:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000296:	2c0f      	cmp	r4, #15
 8000298:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800029c:	d933      	bls.n	8000306 <memset+0x9a>
 800029e:	f1a4 0610 	sub.w	r6, r4, #16
 80002a2:	0936      	lsrs	r6, r6, #4
 80002a4:	f103 0720 	add.w	r7, r3, #32
 80002a8:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 80002ac:	f103 0210 	add.w	r2, r3, #16
 80002b0:	e942 5504 	strd	r5, r5, [r2, #-16]
 80002b4:	e942 5502 	strd	r5, r5, [r2, #-8]
 80002b8:	3210      	adds	r2, #16
 80002ba:	42ba      	cmp	r2, r7
 80002bc:	d1f8      	bne.n	80002b0 <memset+0x44>
 80002be:	1c72      	adds	r2, r6, #1
 80002c0:	f014 0f0c 	tst.w	r4, #12
 80002c4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80002c8:	f004 060f 	and.w	r6, r4, #15
 80002cc:	d013      	beq.n	80002f6 <memset+0x8a>
 80002ce:	1f33      	subs	r3, r6, #4
 80002d0:	f023 0303 	bic.w	r3, r3, #3
 80002d4:	3304      	adds	r3, #4
 80002d6:	4413      	add	r3, r2
 80002d8:	f842 5b04 	str.w	r5, [r2], #4
 80002dc:	4293      	cmp	r3, r2
 80002de:	d1fb      	bne.n	80002d8 <memset+0x6c>
 80002e0:	f006 0403 	and.w	r4, r6, #3
 80002e4:	b12c      	cbz	r4, 80002f2 <memset+0x86>
 80002e6:	b2c9      	uxtb	r1, r1
 80002e8:	441c      	add	r4, r3
 80002ea:	f803 1b01 	strb.w	r1, [r3], #1
 80002ee:	429c      	cmp	r4, r3
 80002f0:	d1fb      	bne.n	80002ea <memset+0x7e>
 80002f2:	bcf0      	pop	{r4, r5, r6, r7}
 80002f4:	4770      	bx	lr
 80002f6:	4634      	mov	r4, r6
 80002f8:	4613      	mov	r3, r2
 80002fa:	2c00      	cmp	r4, #0
 80002fc:	d1f3      	bne.n	80002e6 <memset+0x7a>
 80002fe:	e7f8      	b.n	80002f2 <memset+0x86>
 8000300:	4614      	mov	r4, r2
 8000302:	4603      	mov	r3, r0
 8000304:	e7c2      	b.n	800028c <memset+0x20>
 8000306:	461a      	mov	r2, r3
 8000308:	4626      	mov	r6, r4
 800030a:	e7e0      	b.n	80002ce <memset+0x62>

0800030c <_siprintf_r>:
 800030c:	b40c      	push	{r2, r3}
 800030e:	b570      	push	{r4, r5, r6, lr}
 8000310:	b09c      	sub	sp, #112	; 0x70
 8000312:	ac20      	add	r4, sp, #128	; 0x80
 8000314:	4e0b      	ldr	r6, [pc, #44]	; (8000344 <_siprintf_r+0x38>)
 8000316:	f854 2b04 	ldr.w	r2, [r4], #4
 800031a:	9102      	str	r1, [sp, #8]
 800031c:	4623      	mov	r3, r4
 800031e:	9106      	str	r1, [sp, #24]
 8000320:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8000324:	a902      	add	r1, sp, #8
 8000326:	9401      	str	r4, [sp, #4]
 8000328:	9507      	str	r5, [sp, #28]
 800032a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800032e:	f000 f909 	bl	8000544 <_svfiprintf_r>
 8000332:	9b02      	ldr	r3, [sp, #8]
 8000334:	2200      	movs	r2, #0
 8000336:	701a      	strb	r2, [r3, #0]
 8000338:	b01c      	add	sp, #112	; 0x70
 800033a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800033e:	b002      	add	sp, #8
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	ffff0208 	.word	0xffff0208

08000348 <siprintf>:
 8000348:	b40e      	push	{r1, r2, r3}
 800034a:	b530      	push	{r4, r5, lr}
 800034c:	b09c      	sub	sp, #112	; 0x70
 800034e:	ab1f      	add	r3, sp, #124	; 0x7c
 8000350:	4c0c      	ldr	r4, [pc, #48]	; (8000384 <siprintf+0x3c>)
 8000352:	4d0d      	ldr	r5, [pc, #52]	; (8000388 <siprintf+0x40>)
 8000354:	f853 2b04 	ldr.w	r2, [r3], #4
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4601      	mov	r1, r0
 800035c:	9102      	str	r1, [sp, #8]
 800035e:	9106      	str	r1, [sp, #24]
 8000360:	6820      	ldr	r0, [r4, #0]
 8000362:	a902      	add	r1, sp, #8
 8000364:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8000368:	9407      	str	r4, [sp, #28]
 800036a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800036e:	f000 f8e9 	bl	8000544 <_svfiprintf_r>
 8000372:	9b02      	ldr	r3, [sp, #8]
 8000374:	2200      	movs	r2, #0
 8000376:	701a      	strb	r2, [r3, #0]
 8000378:	b01c      	add	sp, #112	; 0x70
 800037a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800037e:	b003      	add	sp, #12
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	20000000 	.word	0x20000000
 8000388:	ffff0208 	.word	0xffff0208

0800038c <__ssputs_r>:
 800038c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000390:	688e      	ldr	r6, [r1, #8]
 8000392:	461d      	mov	r5, r3
 8000394:	42ae      	cmp	r6, r5
 8000396:	460c      	mov	r4, r1
 8000398:	680b      	ldr	r3, [r1, #0]
 800039a:	4617      	mov	r7, r2
 800039c:	d836      	bhi.n	800040c <__ssputs_r+0x80>
 800039e:	4680      	mov	r8, r0
 80003a0:	8988      	ldrh	r0, [r1, #12]
 80003a2:	f410 6f90 	tst.w	r0, #1152	; 0x480
 80003a6:	d10e      	bne.n	80003c6 <__ssputs_r+0x3a>
 80003a8:	4635      	mov	r5, r6
 80003aa:	4618      	mov	r0, r3
 80003ac:	462a      	mov	r2, r5
 80003ae:	4639      	mov	r1, r7
 80003b0:	f000 fcd0 	bl	8000d54 <memmove>
 80003b4:	68a2      	ldr	r2, [r4, #8]
 80003b6:	6823      	ldr	r3, [r4, #0]
 80003b8:	1b96      	subs	r6, r2, r6
 80003ba:	442b      	add	r3, r5
 80003bc:	60a6      	str	r6, [r4, #8]
 80003be:	6023      	str	r3, [r4, #0]
 80003c0:	2000      	movs	r0, #0
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	e9d1 1604 	ldrd	r1, r6, [r1, #16]
 80003ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80003ce:	eba3 0901 	sub.w	r9, r3, r1
 80003d2:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 80003d6:	1c6b      	adds	r3, r5, #1
 80003d8:	1076      	asrs	r6, r6, #1
 80003da:	444b      	add	r3, r9
 80003dc:	42b3      	cmp	r3, r6
 80003de:	4632      	mov	r2, r6
 80003e0:	bf84      	itt	hi
 80003e2:	461e      	movhi	r6, r3
 80003e4:	4632      	movhi	r2, r6
 80003e6:	0543      	lsls	r3, r0, #21
 80003e8:	d512      	bpl.n	8000410 <__ssputs_r+0x84>
 80003ea:	4611      	mov	r1, r2
 80003ec:	4640      	mov	r0, r8
 80003ee:	f000 fd6f 	bl	8000ed0 <_malloc_r>
 80003f2:	4682      	mov	sl, r0
 80003f4:	b300      	cbz	r0, 8000438 <__ssputs_r+0xac>
 80003f6:	464a      	mov	r2, r9
 80003f8:	6921      	ldr	r1, [r4, #16]
 80003fa:	f000 fc11 	bl	8000c20 <memcpy>
 80003fe:	89a3      	ldrh	r3, [r4, #12]
 8000400:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000408:	81a3      	strh	r3, [r4, #12]
 800040a:	e006      	b.n	800041a <__ssputs_r+0x8e>
 800040c:	462e      	mov	r6, r5
 800040e:	e7cc      	b.n	80003aa <__ssputs_r+0x1e>
 8000410:	4640      	mov	r0, r8
 8000412:	f000 fdc1 	bl	8000f98 <_realloc_r>
 8000416:	4682      	mov	sl, r0
 8000418:	b150      	cbz	r0, 8000430 <__ssputs_r+0xa4>
 800041a:	eba6 0209 	sub.w	r2, r6, r9
 800041e:	eb0a 0309 	add.w	r3, sl, r9
 8000422:	6166      	str	r6, [r4, #20]
 8000424:	f8c4 a010 	str.w	sl, [r4, #16]
 8000428:	6023      	str	r3, [r4, #0]
 800042a:	60a2      	str	r2, [r4, #8]
 800042c:	462e      	mov	r6, r5
 800042e:	e7bc      	b.n	80003aa <__ssputs_r+0x1e>
 8000430:	6921      	ldr	r1, [r4, #16]
 8000432:	4640      	mov	r0, r8
 8000434:	f000 fcf6 	bl	8000e24 <_free_r>
 8000438:	230c      	movs	r3, #12
 800043a:	f8c8 3000 	str.w	r3, [r8]
 800043e:	89a3      	ldrh	r3, [r4, #12]
 8000440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000444:	81a3      	strh	r3, [r4, #12]
 8000446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800044a:	e7ba      	b.n	80003c2 <__ssputs_r+0x36>

0800044c <__ssprint_r>:
 800044c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000450:	6893      	ldr	r3, [r2, #8]
 8000452:	b083      	sub	sp, #12
 8000454:	4690      	mov	r8, r2
 8000456:	2b00      	cmp	r3, #0
 8000458:	d06d      	beq.n	8000536 <__ssprint_r+0xea>
 800045a:	6817      	ldr	r7, [r2, #0]
 800045c:	688d      	ldr	r5, [r1, #8]
 800045e:	4682      	mov	sl, r0
 8000460:	460c      	mov	r4, r1
 8000462:	6808      	ldr	r0, [r1, #0]
 8000464:	3708      	adds	r7, #8
 8000466:	e043      	b.n	80004f0 <__ssprint_r+0xa4>
 8000468:	89a3      	ldrh	r3, [r4, #12]
 800046a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800046e:	d02e      	beq.n	80004ce <__ssprint_r+0x82>
 8000470:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 8000474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000478:	eba0 0b01 	sub.w	fp, r0, r1
 800047c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000480:	eb0b 0006 	add.w	r0, fp, r6
 8000484:	106d      	asrs	r5, r5, #1
 8000486:	3001      	adds	r0, #1
 8000488:	42a8      	cmp	r0, r5
 800048a:	462a      	mov	r2, r5
 800048c:	bf84      	itt	hi
 800048e:	4605      	movhi	r5, r0
 8000490:	462a      	movhi	r2, r5
 8000492:	055b      	lsls	r3, r3, #21
 8000494:	d536      	bpl.n	8000504 <__ssprint_r+0xb8>
 8000496:	4611      	mov	r1, r2
 8000498:	4650      	mov	r0, sl
 800049a:	f000 fd19 	bl	8000ed0 <_malloc_r>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d03a      	beq.n	8000518 <__ssprint_r+0xcc>
 80004a2:	465a      	mov	r2, fp
 80004a4:	6921      	ldr	r1, [r4, #16]
 80004a6:	9001      	str	r0, [sp, #4]
 80004a8:	f000 fbba 	bl	8000c20 <memcpy>
 80004ac:	89a2      	ldrh	r2, [r4, #12]
 80004ae:	9b01      	ldr	r3, [sp, #4]
 80004b0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80004b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004b8:	81a2      	strh	r2, [r4, #12]
 80004ba:	eba5 020b 	sub.w	r2, r5, fp
 80004be:	eb03 000b 	add.w	r0, r3, fp
 80004c2:	6165      	str	r5, [r4, #20]
 80004c4:	6123      	str	r3, [r4, #16]
 80004c6:	6020      	str	r0, [r4, #0]
 80004c8:	60a2      	str	r2, [r4, #8]
 80004ca:	4635      	mov	r5, r6
 80004cc:	46b3      	mov	fp, r6
 80004ce:	465a      	mov	r2, fp
 80004d0:	4649      	mov	r1, r9
 80004d2:	f000 fc3f 	bl	8000d54 <memmove>
 80004d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80004da:	68a2      	ldr	r2, [r4, #8]
 80004dc:	6820      	ldr	r0, [r4, #0]
 80004de:	1b55      	subs	r5, r2, r5
 80004e0:	4458      	add	r0, fp
 80004e2:	1b9e      	subs	r6, r3, r6
 80004e4:	60a5      	str	r5, [r4, #8]
 80004e6:	6020      	str	r0, [r4, #0]
 80004e8:	f8c8 6008 	str.w	r6, [r8, #8]
 80004ec:	b31e      	cbz	r6, 8000536 <__ssprint_r+0xea>
 80004ee:	3708      	adds	r7, #8
 80004f0:	e957 9602 	ldrd	r9, r6, [r7, #-8]
 80004f4:	46ab      	mov	fp, r5
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	d0f9      	beq.n	80004ee <__ssprint_r+0xa2>
 80004fa:	42ae      	cmp	r6, r5
 80004fc:	d2b4      	bcs.n	8000468 <__ssprint_r+0x1c>
 80004fe:	4635      	mov	r5, r6
 8000500:	46b3      	mov	fp, r6
 8000502:	e7e4      	b.n	80004ce <__ssprint_r+0x82>
 8000504:	4650      	mov	r0, sl
 8000506:	f000 fd47 	bl	8000f98 <_realloc_r>
 800050a:	4603      	mov	r3, r0
 800050c:	2800      	cmp	r0, #0
 800050e:	d1d4      	bne.n	80004ba <__ssprint_r+0x6e>
 8000510:	6921      	ldr	r1, [r4, #16]
 8000512:	4650      	mov	r0, sl
 8000514:	f000 fc86 	bl	8000e24 <_free_r>
 8000518:	230c      	movs	r3, #12
 800051a:	f8ca 3000 	str.w	r3, [sl]
 800051e:	89a3      	ldrh	r3, [r4, #12]
 8000520:	2200      	movs	r2, #0
 8000522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800052a:	81a3      	strh	r3, [r4, #12]
 800052c:	e9c8 2201 	strd	r2, r2, [r8, #4]
 8000530:	b003      	add	sp, #12
 8000532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000536:	2000      	movs	r0, #0
 8000538:	f8c8 0004 	str.w	r0, [r8, #4]
 800053c:	b003      	add	sp, #12
 800053e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000542:	bf00      	nop

08000544 <_svfiprintf_r>:
 8000544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000548:	4690      	mov	r8, r2
 800054a:	898a      	ldrh	r2, [r1, #12]
 800054c:	b09f      	sub	sp, #124	; 0x7c
 800054e:	0614      	lsls	r4, r2, #24
 8000550:	468b      	mov	fp, r1
 8000552:	9002      	str	r0, [sp, #8]
 8000554:	d503      	bpl.n	800055e <_svfiprintf_r+0x1a>
 8000556:	690a      	ldr	r2, [r1, #16]
 8000558:	2a00      	cmp	r2, #0
 800055a:	f000 810b 	beq.w	8000774 <_svfiprintf_r+0x230>
 800055e:	9305      	str	r3, [sp, #20]
 8000560:	2330      	movs	r3, #48	; 0x30
 8000562:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8000566:	f898 3000 	ldrb.w	r3, [r8]
 800056a:	4e8e      	ldr	r6, [pc, #568]	; (80007a4 <_svfiprintf_r+0x260>)
 800056c:	2100      	movs	r1, #0
 800056e:	2220      	movs	r2, #32
 8000570:	910b      	str	r1, [sp, #44]	; 0x2c
 8000572:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8000576:	2701      	movs	r7, #1
 8000578:	2b00      	cmp	r3, #0
 800057a:	f000 8084 	beq.w	8000686 <_svfiprintf_r+0x142>
 800057e:	2b25      	cmp	r3, #37	; 0x25
 8000580:	f000 80f6 	beq.w	8000770 <_svfiprintf_r+0x22c>
 8000584:	4645      	mov	r5, r8
 8000586:	e003      	b.n	8000590 <_svfiprintf_r+0x4c>
 8000588:	2b25      	cmp	r3, #37	; 0x25
 800058a:	f000 8086 	beq.w	800069a <_svfiprintf_r+0x156>
 800058e:	4625      	mov	r5, r4
 8000590:	786b      	ldrb	r3, [r5, #1]
 8000592:	1c6c      	adds	r4, r5, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f7      	bne.n	8000588 <_svfiprintf_r+0x44>
 8000598:	ebb4 0a08 	subs.w	sl, r4, r8
 800059c:	d073      	beq.n	8000686 <_svfiprintf_r+0x142>
 800059e:	4642      	mov	r2, r8
 80005a0:	4653      	mov	r3, sl
 80005a2:	4659      	mov	r1, fp
 80005a4:	9802      	ldr	r0, [sp, #8]
 80005a6:	f7ff fef1 	bl	800038c <__ssputs_r>
 80005aa:	3001      	adds	r0, #1
 80005ac:	d06b      	beq.n	8000686 <_svfiprintf_r+0x142>
 80005ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80005b0:	786a      	ldrb	r2, [r5, #1]
 80005b2:	4453      	add	r3, sl
 80005b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	d065      	beq.n	8000686 <_svfiprintf_r+0x142>
 80005ba:	2300      	movs	r3, #0
 80005bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005c0:	3401      	adds	r4, #1
 80005c2:	9306      	str	r3, [sp, #24]
 80005c4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80005c8:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80005cc:	931c      	str	r3, [sp, #112]	; 0x70
 80005ce:	9207      	str	r2, [sp, #28]
 80005d0:	e005      	b.n	80005de <_svfiprintf_r+0x9a>
 80005d2:	9a06      	ldr	r2, [sp, #24]
 80005d4:	fa07 f303 	lsl.w	r3, r7, r3
 80005d8:	4313      	orrs	r3, r2
 80005da:	462c      	mov	r4, r5
 80005dc:	9306      	str	r3, [sp, #24]
 80005de:	4625      	mov	r5, r4
 80005e0:	2205      	movs	r2, #5
 80005e2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80005e6:	4630      	mov	r0, r6
 80005e8:	f000 faca 	bl	8000b80 <memchr>
 80005ec:	46aa      	mov	sl, r5
 80005ee:	1b83      	subs	r3, r0, r6
 80005f0:	2800      	cmp	r0, #0
 80005f2:	d1ee      	bne.n	80005d2 <_svfiprintf_r+0x8e>
 80005f4:	9b06      	ldr	r3, [sp, #24]
 80005f6:	06d9      	lsls	r1, r3, #27
 80005f8:	bf44      	itt	mi
 80005fa:	2220      	movmi	r2, #32
 80005fc:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8000600:	7821      	ldrb	r1, [r4, #0]
 8000602:	071a      	lsls	r2, r3, #28
 8000604:	bf44      	itt	mi
 8000606:	222b      	movmi	r2, #43	; 0x2b
 8000608:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 800060c:	292a      	cmp	r1, #42	; 0x2a
 800060e:	d148      	bne.n	80006a2 <_svfiprintf_r+0x15e>
 8000610:	9a05      	ldr	r2, [sp, #20]
 8000612:	6811      	ldr	r1, [r2, #0]
 8000614:	3204      	adds	r2, #4
 8000616:	2900      	cmp	r1, #0
 8000618:	9205      	str	r2, [sp, #20]
 800061a:	db7e      	blt.n	800071a <_svfiprintf_r+0x1d6>
 800061c:	9109      	str	r1, [sp, #36]	; 0x24
 800061e:	7861      	ldrb	r1, [r4, #1]
 8000620:	1ca5      	adds	r5, r4, #2
 8000622:	292e      	cmp	r1, #46	; 0x2e
 8000624:	d056      	beq.n	80006d4 <_svfiprintf_r+0x190>
 8000626:	4c60      	ldr	r4, [pc, #384]	; (80007a8 <_svfiprintf_r+0x264>)
 8000628:	2203      	movs	r2, #3
 800062a:	4620      	mov	r0, r4
 800062c:	f000 faa8 	bl	8000b80 <memchr>
 8000630:	2800      	cmp	r0, #0
 8000632:	d068      	beq.n	8000706 <_svfiprintf_r+0x1c2>
 8000634:	1b00      	subs	r0, r0, r4
 8000636:	9b06      	ldr	r3, [sp, #24]
 8000638:	2440      	movs	r4, #64	; 0x40
 800063a:	fa04 f000 	lsl.w	r0, r4, r0
 800063e:	4303      	orrs	r3, r0
 8000640:	9306      	str	r3, [sp, #24]
 8000642:	f105 0801 	add.w	r8, r5, #1
 8000646:	7829      	ldrb	r1, [r5, #0]
 8000648:	4858      	ldr	r0, [pc, #352]	; (80007ac <_svfiprintf_r+0x268>)
 800064a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 800064e:	2206      	movs	r2, #6
 8000650:	f000 fa96 	bl	8000b80 <memchr>
 8000654:	2800      	cmp	r0, #0
 8000656:	d066      	beq.n	8000726 <_svfiprintf_r+0x1e2>
 8000658:	4b55      	ldr	r3, [pc, #340]	; (80007b0 <_svfiprintf_r+0x26c>)
 800065a:	2b00      	cmp	r3, #0
 800065c:	d056      	beq.n	800070c <_svfiprintf_r+0x1c8>
 800065e:	ab05      	add	r3, sp, #20
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	465a      	mov	r2, fp
 8000664:	4b53      	ldr	r3, [pc, #332]	; (80007b4 <_svfiprintf_r+0x270>)
 8000666:	9802      	ldr	r0, [sp, #8]
 8000668:	a906      	add	r1, sp, #24
 800066a:	f3af 8000 	nop.w
 800066e:	4681      	mov	r9, r0
 8000670:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8000674:	d007      	beq.n	8000686 <_svfiprintf_r+0x142>
 8000676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000678:	444b      	add	r3, r9
 800067a:	930b      	str	r3, [sp, #44]	; 0x2c
 800067c:	f898 3000 	ldrb.w	r3, [r8]
 8000680:	2b00      	cmp	r3, #0
 8000682:	f47f af7c 	bne.w	800057e <_svfiprintf_r+0x3a>
 8000686:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800068a:	065b      	lsls	r3, r3, #25
 800068c:	bf54      	ite	pl
 800068e:	980b      	ldrpl	r0, [sp, #44]	; 0x2c
 8000690:	f04f 30ff 	movmi.w	r0, #4294967295	; 0xffffffff
 8000694:	b01f      	add	sp, #124	; 0x7c
 8000696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800069a:	ebb4 0a08 	subs.w	sl, r4, r8
 800069e:	d08c      	beq.n	80005ba <_svfiprintf_r+0x76>
 80006a0:	e77d      	b.n	800059e <_svfiprintf_r+0x5a>
 80006a2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80006a6:	2a09      	cmp	r2, #9
 80006a8:	bf88      	it	hi
 80006aa:	46a2      	movhi	sl, r4
 80006ac:	d8b9      	bhi.n	8000622 <_svfiprintf_r+0xde>
 80006ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80006b0:	e001      	b.n	80006b6 <_svfiprintf_r+0x172>
 80006b2:	462c      	mov	r4, r5
 80006b4:	3501      	adds	r5, #1
 80006b6:	7829      	ldrb	r1, [r5, #0]
 80006b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80006bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80006c0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80006c4:	2a09      	cmp	r2, #9
 80006c6:	46aa      	mov	sl, r5
 80006c8:	d9f3      	bls.n	80006b2 <_svfiprintf_r+0x16e>
 80006ca:	292e      	cmp	r1, #46	; 0x2e
 80006cc:	f104 0502 	add.w	r5, r4, #2
 80006d0:	9309      	str	r3, [sp, #36]	; 0x24
 80006d2:	d1a8      	bne.n	8000626 <_svfiprintf_r+0xe2>
 80006d4:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80006d8:	292a      	cmp	r1, #42	; 0x2a
 80006da:	d12e      	bne.n	800073a <_svfiprintf_r+0x1f6>
 80006dc:	9b05      	ldr	r3, [sp, #20]
 80006de:	f89a 1002 	ldrb.w	r1, [sl, #2]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	9207      	str	r2, [sp, #28]
 80006e6:	3304      	adds	r3, #4
 80006e8:	2a00      	cmp	r2, #0
 80006ea:	9305      	str	r3, [sp, #20]
 80006ec:	f10a 0503 	add.w	r5, sl, #3
 80006f0:	f10a 0302 	add.w	r3, sl, #2
 80006f4:	db37      	blt.n	8000766 <_svfiprintf_r+0x222>
 80006f6:	4c2c      	ldr	r4, [pc, #176]	; (80007a8 <_svfiprintf_r+0x264>)
 80006f8:	2203      	movs	r2, #3
 80006fa:	4620      	mov	r0, r4
 80006fc:	469a      	mov	sl, r3
 80006fe:	f000 fa3f 	bl	8000b80 <memchr>
 8000702:	2800      	cmp	r0, #0
 8000704:	d196      	bne.n	8000634 <_svfiprintf_r+0xf0>
 8000706:	46a8      	mov	r8, r5
 8000708:	4655      	mov	r5, sl
 800070a:	e79c      	b.n	8000646 <_svfiprintf_r+0x102>
 800070c:	9b05      	ldr	r3, [sp, #20]
 800070e:	3307      	adds	r3, #7
 8000710:	f023 0307 	bic.w	r3, r3, #7
 8000714:	3308      	adds	r3, #8
 8000716:	9305      	str	r3, [sp, #20]
 8000718:	e7ad      	b.n	8000676 <_svfiprintf_r+0x132>
 800071a:	4249      	negs	r1, r1
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	9109      	str	r1, [sp, #36]	; 0x24
 8000722:	9306      	str	r3, [sp, #24]
 8000724:	e77b      	b.n	800061e <_svfiprintf_r+0xda>
 8000726:	ab05      	add	r3, sp, #20
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	465a      	mov	r2, fp
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <_svfiprintf_r+0x270>)
 800072e:	9802      	ldr	r0, [sp, #8]
 8000730:	a906      	add	r1, sp, #24
 8000732:	f000 f8d7 	bl	80008e4 <_printf_i>
 8000736:	4681      	mov	r9, r0
 8000738:	e79a      	b.n	8000670 <_svfiprintf_r+0x12c>
 800073a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800073e:	2300      	movs	r3, #0
 8000740:	2a09      	cmp	r2, #9
 8000742:	9307      	str	r3, [sp, #28]
 8000744:	d901      	bls.n	800074a <_svfiprintf_r+0x206>
 8000746:	e023      	b.n	8000790 <_svfiprintf_r+0x24c>
 8000748:	4655      	mov	r5, sl
 800074a:	7869      	ldrb	r1, [r5, #1]
 800074c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000750:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000754:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000758:	2a09      	cmp	r2, #9
 800075a:	f105 0a01 	add.w	sl, r5, #1
 800075e:	d9f3      	bls.n	8000748 <_svfiprintf_r+0x204>
 8000760:	3502      	adds	r5, #2
 8000762:	9307      	str	r3, [sp, #28]
 8000764:	e75f      	b.n	8000626 <_svfiprintf_r+0xe2>
 8000766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800076a:	469a      	mov	sl, r3
 800076c:	9207      	str	r2, [sp, #28]
 800076e:	e75a      	b.n	8000626 <_svfiprintf_r+0xe2>
 8000770:	4644      	mov	r4, r8
 8000772:	e722      	b.n	80005ba <_svfiprintf_r+0x76>
 8000774:	2140      	movs	r1, #64	; 0x40
 8000776:	9303      	str	r3, [sp, #12]
 8000778:	f000 fbaa 	bl	8000ed0 <_malloc_r>
 800077c:	9b03      	ldr	r3, [sp, #12]
 800077e:	f8cb 0000 	str.w	r0, [fp]
 8000782:	f8cb 0010 	str.w	r0, [fp, #16]
 8000786:	b130      	cbz	r0, 8000796 <_svfiprintf_r+0x252>
 8000788:	2240      	movs	r2, #64	; 0x40
 800078a:	f8cb 2014 	str.w	r2, [fp, #20]
 800078e:	e6e6      	b.n	800055e <_svfiprintf_r+0x1a>
 8000790:	46aa      	mov	sl, r5
 8000792:	3501      	adds	r5, #1
 8000794:	e747      	b.n	8000626 <_svfiprintf_r+0xe2>
 8000796:	9a02      	ldr	r2, [sp, #8]
 8000798:	230c      	movs	r3, #12
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007a0:	e778      	b.n	8000694 <_svfiprintf_r+0x150>
 80007a2:	bf00      	nop
 80007a4:	08005cc8 	.word	0x08005cc8
 80007a8:	08005cd0 	.word	0x08005cd0
 80007ac:	08005cd4 	.word	0x08005cd4
 80007b0:	00000000 	.word	0x00000000
 80007b4:	0800038d 	.word	0x0800038d

080007b8 <_printf_common>:
 80007b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007bc:	460c      	mov	r4, r1
 80007be:	4691      	mov	r9, r2
 80007c0:	690a      	ldr	r2, [r1, #16]
 80007c2:	6889      	ldr	r1, [r1, #8]
 80007c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80007c8:	428a      	cmp	r2, r1
 80007ca:	bfb8      	it	lt
 80007cc:	460a      	movlt	r2, r1
 80007ce:	f8c9 2000 	str.w	r2, [r9]
 80007d2:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 80007d6:	4606      	mov	r6, r0
 80007d8:	461f      	mov	r7, r3
 80007da:	b111      	cbz	r1, 80007e2 <_printf_common+0x2a>
 80007dc:	3201      	adds	r2, #1
 80007de:	f8c9 2000 	str.w	r2, [r9]
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	0699      	lsls	r1, r3, #26
 80007e6:	d55c      	bpl.n	80008a2 <_printf_common+0xea>
 80007e8:	f8d9 2000 	ldr.w	r2, [r9]
 80007ec:	3202      	adds	r2, #2
 80007ee:	f8c9 2000 	str.w	r2, [r9]
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	f013 0f06 	tst.w	r3, #6
 80007f8:	4619      	mov	r1, r3
 80007fa:	d11d      	bne.n	8000838 <_printf_common+0x80>
 80007fc:	68e1      	ldr	r1, [r4, #12]
 80007fe:	1a8a      	subs	r2, r1, r2
 8000800:	2a00      	cmp	r2, #0
 8000802:	bfd8      	it	le
 8000804:	4619      	movle	r1, r3
 8000806:	dd17      	ble.n	8000838 <_printf_common+0x80>
 8000808:	f104 0a19 	add.w	sl, r4, #25
 800080c:	2500      	movs	r5, #0
 800080e:	e005      	b.n	800081c <_printf_common+0x64>
 8000810:	68e3      	ldr	r3, [r4, #12]
 8000812:	f8d9 2000 	ldr.w	r2, [r9]
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	42ab      	cmp	r3, r5
 800081a:	dd0c      	ble.n	8000836 <_printf_common+0x7e>
 800081c:	2301      	movs	r3, #1
 800081e:	4652      	mov	r2, sl
 8000820:	4639      	mov	r1, r7
 8000822:	4630      	mov	r0, r6
 8000824:	47c0      	blx	r8
 8000826:	3001      	adds	r0, #1
 8000828:	f105 0501 	add.w	r5, r5, #1
 800082c:	d1f0      	bne.n	8000810 <_printf_common+0x58>
 800082e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	6821      	ldr	r1, [r4, #0]
 8000838:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800083c:	3300      	adds	r3, #0
 800083e:	bf18      	it	ne
 8000840:	2301      	movne	r3, #1
 8000842:	068a      	lsls	r2, r1, #26
 8000844:	d50a      	bpl.n	800085c <_printf_common+0xa4>
 8000846:	18e1      	adds	r1, r4, r3
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	2030      	movs	r0, #48	; 0x30
 800084c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000850:	4422      	add	r2, r4
 8000852:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000856:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800085a:	3302      	adds	r3, #2
 800085c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000860:	4639      	mov	r1, r7
 8000862:	4630      	mov	r0, r6
 8000864:	47c0      	blx	r8
 8000866:	3001      	adds	r0, #1
 8000868:	d0e1      	beq.n	800082e <_printf_common+0x76>
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	68a2      	ldr	r2, [r4, #8]
 800086e:	6921      	ldr	r1, [r4, #16]
 8000870:	f003 0306 	and.w	r3, r3, #6
 8000874:	2b04      	cmp	r3, #4
 8000876:	d01d      	beq.n	80008b4 <_printf_common+0xfc>
 8000878:	428a      	cmp	r2, r1
 800087a:	dd26      	ble.n	80008ca <_printf_common+0x112>
 800087c:	f04f 0900 	mov.w	r9, #0
 8000880:	1a52      	subs	r2, r2, r1
 8000882:	4491      	add	r9, r2
 8000884:	341a      	adds	r4, #26
 8000886:	2500      	movs	r5, #0
 8000888:	e001      	b.n	800088e <_printf_common+0xd6>
 800088a:	454d      	cmp	r5, r9
 800088c:	da1d      	bge.n	80008ca <_printf_common+0x112>
 800088e:	2301      	movs	r3, #1
 8000890:	4622      	mov	r2, r4
 8000892:	4639      	mov	r1, r7
 8000894:	4630      	mov	r0, r6
 8000896:	47c0      	blx	r8
 8000898:	3001      	adds	r0, #1
 800089a:	f105 0501 	add.w	r5, r5, #1
 800089e:	d1f4      	bne.n	800088a <_printf_common+0xd2>
 80008a0:	e7c5      	b.n	800082e <_printf_common+0x76>
 80008a2:	f013 0f06 	tst.w	r3, #6
 80008a6:	d013      	beq.n	80008d0 <_printf_common+0x118>
 80008a8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80008ac:	3300      	adds	r3, #0
 80008ae:	bf18      	it	ne
 80008b0:	2301      	movne	r3, #1
 80008b2:	e7d3      	b.n	800085c <_printf_common+0xa4>
 80008b4:	f8d9 0000 	ldr.w	r0, [r9]
 80008b8:	68e3      	ldr	r3, [r4, #12]
 80008ba:	428a      	cmp	r2, r1
 80008bc:	eba3 0300 	sub.w	r3, r3, r0
 80008c0:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
 80008c4:	dcdc      	bgt.n	8000880 <_printf_common+0xc8>
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	dcdc      	bgt.n	8000884 <_printf_common+0xcc>
 80008ca:	2000      	movs	r0, #0
 80008cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d0:	68e1      	ldr	r1, [r4, #12]
 80008d2:	f8d9 2000 	ldr.w	r2, [r9]
 80008d6:	1a8a      	subs	r2, r1, r2
 80008d8:	2a00      	cmp	r2, #0
 80008da:	bfd8      	it	le
 80008dc:	4619      	movle	r1, r3
 80008de:	dc93      	bgt.n	8000808 <_printf_common+0x50>
 80008e0:	e7aa      	b.n	8000838 <_printf_common+0x80>
 80008e2:	bf00      	nop

080008e4 <_printf_i>:
 80008e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008e8:	460c      	mov	r4, r1
 80008ea:	7e09      	ldrb	r1, [r1, #24]
 80008ec:	b085      	sub	sp, #20
 80008ee:	296e      	cmp	r1, #110	; 0x6e
 80008f0:	4606      	mov	r6, r0
 80008f2:	4617      	mov	r7, r2
 80008f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80008f6:	4698      	mov	r8, r3
 80008f8:	f104 0e43 	add.w	lr, r4, #67	; 0x43
 80008fc:	d06d      	beq.n	80009da <_printf_i+0xf6>
 80008fe:	d939      	bls.n	8000974 <_printf_i+0x90>
 8000900:	2973      	cmp	r1, #115	; 0x73
 8000902:	f000 80f6 	beq.w	8000af2 <_printf_i+0x20e>
 8000906:	d944      	bls.n	8000992 <_printf_i+0xae>
 8000908:	2975      	cmp	r1, #117	; 0x75
 800090a:	f000 8104 	beq.w	8000b16 <_printf_i+0x232>
 800090e:	2978      	cmp	r1, #120	; 0x78
 8000910:	f040 8111 	bne.w	8000b36 <_printf_i+0x252>
 8000914:	2378      	movs	r3, #120	; 0x78
 8000916:	6822      	ldr	r2, [r4, #0]
 8000918:	f8df c258 	ldr.w	ip, [pc, #600]	; 8000b74 <_printf_i+0x290>
 800091c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000920:	6801      	ldr	r1, [r0, #0]
 8000922:	0615      	lsls	r5, r2, #24
 8000924:	f851 3b04 	ldr.w	r3, [r1], #4
 8000928:	6001      	str	r1, [r0, #0]
 800092a:	f140 80a1 	bpl.w	8000a70 <_printf_i+0x18c>
 800092e:	07d1      	lsls	r1, r2, #31
 8000930:	bf44      	itt	mi
 8000932:	f042 0220 	orrmi.w	r2, r2, #32
 8000936:	6022      	strmi	r2, [r4, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	f000 8093 	beq.w	8000a64 <_printf_i+0x180>
 800093e:	2210      	movs	r2, #16
 8000940:	2100      	movs	r1, #0
 8000942:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000946:	6860      	ldr	r0, [r4, #4]
 8000948:	60a0      	str	r0, [r4, #8]
 800094a:	2800      	cmp	r0, #0
 800094c:	f2c0 80c8 	blt.w	8000ae0 <_printf_i+0x1fc>
 8000950:	6821      	ldr	r1, [r4, #0]
 8000952:	f021 0104 	bic.w	r1, r1, #4
 8000956:	6021      	str	r1, [r4, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	f040 80a3 	bne.w	8000aa4 <_printf_i+0x1c0>
 800095e:	2800      	cmp	r0, #0
 8000960:	f040 80c0 	bne.w	8000ae4 <_printf_i+0x200>
 8000964:	4675      	mov	r5, lr
 8000966:	2a08      	cmp	r2, #8
 8000968:	f000 80ac 	beq.w	8000ac4 <_printf_i+0x1e0>
 800096c:	ebae 0305 	sub.w	r3, lr, r5
 8000970:	6123      	str	r3, [r4, #16]
 8000972:	e041      	b.n	80009f8 <_printf_i+0x114>
 8000974:	2963      	cmp	r1, #99	; 0x63
 8000976:	f000 80e5 	beq.w	8000b44 <_printf_i+0x260>
 800097a:	d81a      	bhi.n	80009b2 <_printf_i+0xce>
 800097c:	2900      	cmp	r1, #0
 800097e:	d038      	beq.n	80009f2 <_printf_i+0x10e>
 8000980:	2958      	cmp	r1, #88	; 0x58
 8000982:	f040 80d8 	bne.w	8000b36 <_printf_i+0x252>
 8000986:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 8000b78 <_printf_i+0x294>
 8000990:	e7c6      	b.n	8000920 <_printf_i+0x3c>
 8000992:	296f      	cmp	r1, #111	; 0x6f
 8000994:	f000 80bf 	beq.w	8000b16 <_printf_i+0x232>
 8000998:	2970      	cmp	r1, #112	; 0x70
 800099a:	f040 80cc 	bne.w	8000b36 <_printf_i+0x252>
 800099e:	6822      	ldr	r2, [r4, #0]
 80009a0:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8000b74 <_printf_i+0x290>
 80009a4:	f042 0220 	orr.w	r2, r2, #32
 80009a8:	2378      	movs	r3, #120	; 0x78
 80009aa:	6022      	str	r2, [r4, #0]
 80009ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80009b0:	e7b6      	b.n	8000920 <_printf_i+0x3c>
 80009b2:	2964      	cmp	r1, #100	; 0x64
 80009b4:	d002      	beq.n	80009bc <_printf_i+0xd8>
 80009b6:	2969      	cmp	r1, #105	; 0x69
 80009b8:	f040 80bd 	bne.w	8000b36 <_printf_i+0x252>
 80009bc:	6822      	ldr	r2, [r4, #0]
 80009be:	6803      	ldr	r3, [r0, #0]
 80009c0:	0611      	lsls	r1, r2, #24
 80009c2:	f103 0504 	add.w	r5, r3, #4
 80009c6:	d557      	bpl.n	8000a78 <_printf_i+0x194>
 80009c8:	6819      	ldr	r1, [r3, #0]
 80009ca:	6005      	str	r5, [r0, #0]
 80009cc:	460b      	mov	r3, r1
 80009ce:	2900      	cmp	r1, #0
 80009d0:	db59      	blt.n	8000a86 <_printf_i+0x1a2>
 80009d2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000b78 <_printf_i+0x294>
 80009d6:	220a      	movs	r2, #10
 80009d8:	e7b5      	b.n	8000946 <_printf_i+0x62>
 80009da:	6803      	ldr	r3, [r0, #0]
 80009dc:	6822      	ldr	r2, [r4, #0]
 80009de:	6961      	ldr	r1, [r4, #20]
 80009e0:	1d1d      	adds	r5, r3, #4
 80009e2:	6005      	str	r5, [r0, #0]
 80009e4:	0615      	lsls	r5, r2, #24
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	d402      	bmi.n	80009f0 <_printf_i+0x10c>
 80009ea:	0650      	lsls	r0, r2, #25
 80009ec:	f100 80bd 	bmi.w	8000b6a <_printf_i+0x286>
 80009f0:	6019      	str	r1, [r3, #0]
 80009f2:	2300      	movs	r3, #0
 80009f4:	4675      	mov	r5, lr
 80009f6:	6123      	str	r3, [r4, #16]
 80009f8:	f8cd 8000 	str.w	r8, [sp]
 80009fc:	463b      	mov	r3, r7
 80009fe:	aa03      	add	r2, sp, #12
 8000a00:	4621      	mov	r1, r4
 8000a02:	4630      	mov	r0, r6
 8000a04:	f7ff fed8 	bl	80007b8 <_printf_common>
 8000a08:	3001      	adds	r0, #1
 8000a0a:	d020      	beq.n	8000a4e <_printf_i+0x16a>
 8000a0c:	462a      	mov	r2, r5
 8000a0e:	6923      	ldr	r3, [r4, #16]
 8000a10:	4639      	mov	r1, r7
 8000a12:	4630      	mov	r0, r6
 8000a14:	47c0      	blx	r8
 8000a16:	3001      	adds	r0, #1
 8000a18:	d019      	beq.n	8000a4e <_printf_i+0x16a>
 8000a1a:	6822      	ldr	r2, [r4, #0]
 8000a1c:	9803      	ldr	r0, [sp, #12]
 8000a1e:	68e3      	ldr	r3, [r4, #12]
 8000a20:	0792      	lsls	r2, r2, #30
 8000a22:	d519      	bpl.n	8000a58 <_printf_i+0x174>
 8000a24:	1a1a      	subs	r2, r3, r0
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	dd16      	ble.n	8000a58 <_printf_i+0x174>
 8000a2a:	f104 0919 	add.w	r9, r4, #25
 8000a2e:	2500      	movs	r5, #0
 8000a30:	e004      	b.n	8000a3c <_printf_i+0x158>
 8000a32:	68e3      	ldr	r3, [r4, #12]
 8000a34:	9803      	ldr	r0, [sp, #12]
 8000a36:	1a1a      	subs	r2, r3, r0
 8000a38:	42aa      	cmp	r2, r5
 8000a3a:	dd0d      	ble.n	8000a58 <_printf_i+0x174>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	464a      	mov	r2, r9
 8000a40:	4639      	mov	r1, r7
 8000a42:	4630      	mov	r0, r6
 8000a44:	47c0      	blx	r8
 8000a46:	3001      	adds	r0, #1
 8000a48:	f105 0501 	add.w	r5, r5, #1
 8000a4c:	d1f1      	bne.n	8000a32 <_printf_i+0x14e>
 8000a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a52:	b005      	add	sp, #20
 8000a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a58:	4298      	cmp	r0, r3
 8000a5a:	bfb8      	it	lt
 8000a5c:	4618      	movlt	r0, r3
 8000a5e:	b005      	add	sp, #20
 8000a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a64:	6822      	ldr	r2, [r4, #0]
 8000a66:	f022 0220 	bic.w	r2, r2, #32
 8000a6a:	6022      	str	r2, [r4, #0]
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	e767      	b.n	8000940 <_printf_i+0x5c>
 8000a70:	0650      	lsls	r0, r2, #25
 8000a72:	bf48      	it	mi
 8000a74:	b29b      	uxthmi	r3, r3
 8000a76:	e75a      	b.n	800092e <_printf_i+0x4a>
 8000a78:	0651      	lsls	r1, r2, #25
 8000a7a:	d5a5      	bpl.n	80009c8 <_printf_i+0xe4>
 8000a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a80:	6005      	str	r5, [r0, #0]
 8000a82:	4619      	mov	r1, r3
 8000a84:	e7a3      	b.n	80009ce <_printf_i+0xea>
 8000a86:	6861      	ldr	r1, [r4, #4]
 8000a88:	60a1      	str	r1, [r4, #8]
 8000a8a:	202d      	movs	r0, #45	; 0x2d
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	f1c3 0300 	rsb	r3, r3, #0
 8000a92:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8000a96:	db02      	blt.n	8000a9e <_printf_i+0x1ba>
 8000a98:	f022 0204 	bic.w	r2, r2, #4
 8000a9c:	6022      	str	r2, [r4, #0]
 8000a9e:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 8000b78 <_printf_i+0x294>
 8000aa2:	220a      	movs	r2, #10
 8000aa4:	4675      	mov	r5, lr
 8000aa6:	e000      	b.n	8000aaa <_printf_i+0x1c6>
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8000aae:	fb02 3011 	mls	r0, r2, r1, r3
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	f81c 0000 	ldrb.w	r0, [ip, r0]
 8000ab8:	f805 0d01 	strb.w	r0, [r5, #-1]!
 8000abc:	d2f4      	bcs.n	8000aa8 <_printf_i+0x1c4>
 8000abe:	2a08      	cmp	r2, #8
 8000ac0:	f47f af54 	bne.w	800096c <_printf_i+0x88>
 8000ac4:	6823      	ldr	r3, [r4, #0]
 8000ac6:	07db      	lsls	r3, r3, #31
 8000ac8:	f57f af50 	bpl.w	800096c <_printf_i+0x88>
 8000acc:	6862      	ldr	r2, [r4, #4]
 8000ace:	6923      	ldr	r3, [r4, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	f73f af4b 	bgt.w	800096c <_printf_i+0x88>
 8000ad6:	2330      	movs	r3, #48	; 0x30
 8000ad8:	f805 3c01 	strb.w	r3, [r5, #-1]
 8000adc:	3d01      	subs	r5, #1
 8000ade:	e745      	b.n	800096c <_printf_i+0x88>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1df      	bne.n	8000aa4 <_printf_i+0x1c0>
 8000ae4:	f89c 3000 	ldrb.w	r3, [ip]
 8000ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000af0:	e739      	b.n	8000966 <_printf_i+0x82>
 8000af2:	6803      	ldr	r3, [r0, #0]
 8000af4:	6862      	ldr	r2, [r4, #4]
 8000af6:	1d19      	adds	r1, r3, #4
 8000af8:	6001      	str	r1, [r0, #0]
 8000afa:	681d      	ldr	r5, [r3, #0]
 8000afc:	2100      	movs	r1, #0
 8000afe:	4628      	mov	r0, r5
 8000b00:	f000 f83e 	bl	8000b80 <memchr>
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d032      	beq.n	8000b6e <_printf_i+0x28a>
 8000b08:	1b40      	subs	r0, r0, r5
 8000b0a:	6060      	str	r0, [r4, #4]
 8000b0c:	6120      	str	r0, [r4, #16]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000b14:	e770      	b.n	80009f8 <_printf_i+0x114>
 8000b16:	6822      	ldr	r2, [r4, #0]
 8000b18:	6803      	ldr	r3, [r0, #0]
 8000b1a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000b1e:	f103 0504 	add.w	r5, r3, #4
 8000b22:	d01a      	beq.n	8000b5a <_printf_i+0x276>
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6005      	str	r5, [r0, #0]
 8000b28:	296f      	cmp	r1, #111	; 0x6f
 8000b2a:	bf0c      	ite	eq
 8000b2c:	2208      	moveq	r2, #8
 8000b2e:	220a      	movne	r2, #10
 8000b30:	f8df c044 	ldr.w	ip, [pc, #68]	; 8000b78 <_printf_i+0x294>
 8000b34:	e704      	b.n	8000940 <_printf_i+0x5c>
 8000b36:	2301      	movs	r3, #1
 8000b38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000b3c:	6123      	str	r3, [r4, #16]
 8000b3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b42:	e7e4      	b.n	8000b0e <_printf_i+0x22a>
 8000b44:	6803      	ldr	r3, [r0, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	1d19      	adds	r1, r3, #4
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	6001      	str	r1, [r0, #0]
 8000b4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000b52:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8000b56:	6123      	str	r3, [r4, #16]
 8000b58:	e7d9      	b.n	8000b0e <_printf_i+0x22a>
 8000b5a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000b5e:	bf0d      	iteet	eq
 8000b60:	681b      	ldreq	r3, [r3, #0]
 8000b62:	6005      	strne	r5, [r0, #0]
 8000b64:	881b      	ldrhne	r3, [r3, #0]
 8000b66:	6005      	streq	r5, [r0, #0]
 8000b68:	e7de      	b.n	8000b28 <_printf_i+0x244>
 8000b6a:	8019      	strh	r1, [r3, #0]
 8000b6c:	e741      	b.n	80009f2 <_printf_i+0x10e>
 8000b6e:	6860      	ldr	r0, [r4, #4]
 8000b70:	e7cc      	b.n	8000b0c <_printf_i+0x228>
 8000b72:	bf00      	nop
 8000b74:	08005cf0 	.word	0x08005cf0
 8000b78:	08005cdc 	.word	0x08005cdc
 8000b7c:	00000000 	.word	0x00000000

08000b80 <memchr>:
 8000b80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000b84:	2a10      	cmp	r2, #16
 8000b86:	db2b      	blt.n	8000be0 <memchr+0x60>
 8000b88:	f010 0f07 	tst.w	r0, #7
 8000b8c:	d008      	beq.n	8000ba0 <memchr+0x20>
 8000b8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000b92:	3a01      	subs	r2, #1
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d02d      	beq.n	8000bf4 <memchr+0x74>
 8000b98:	f010 0f07 	tst.w	r0, #7
 8000b9c:	b342      	cbz	r2, 8000bf0 <memchr+0x70>
 8000b9e:	d1f6      	bne.n	8000b8e <memchr+0xe>
 8000ba0:	b4f0      	push	{r4, r5, r6, r7}
 8000ba2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000ba6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000baa:	f022 0407 	bic.w	r4, r2, #7
 8000bae:	f07f 0700 	mvns.w	r7, #0
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000bb8:	3c08      	subs	r4, #8
 8000bba:	ea85 0501 	eor.w	r5, r5, r1
 8000bbe:	ea86 0601 	eor.w	r6, r6, r1
 8000bc2:	fa85 f547 	uadd8	r5, r5, r7
 8000bc6:	faa3 f587 	sel	r5, r3, r7
 8000bca:	fa86 f647 	uadd8	r6, r6, r7
 8000bce:	faa5 f687 	sel	r6, r5, r7
 8000bd2:	b98e      	cbnz	r6, 8000bf8 <memchr+0x78>
 8000bd4:	d1ee      	bne.n	8000bb4 <memchr+0x34>
 8000bd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000bdc:	f002 0207 	and.w	r2, r2, #7
 8000be0:	b132      	cbz	r2, 8000bf0 <memchr+0x70>
 8000be2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000be6:	3a01      	subs	r2, #1
 8000be8:	ea83 0301 	eor.w	r3, r3, r1
 8000bec:	b113      	cbz	r3, 8000bf4 <memchr+0x74>
 8000bee:	d1f8      	bne.n	8000be2 <memchr+0x62>
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	4770      	bx	lr
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	bf06      	itte	eq
 8000bfc:	4635      	moveq	r5, r6
 8000bfe:	3803      	subeq	r0, #3
 8000c00:	3807      	subne	r0, #7
 8000c02:	f015 0f01 	tst.w	r5, #1
 8000c06:	d107      	bne.n	8000c18 <memchr+0x98>
 8000c08:	3001      	adds	r0, #1
 8000c0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000c0e:	bf02      	ittt	eq
 8000c10:	3001      	addeq	r0, #1
 8000c12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000c16:	3001      	addeq	r0, #1
 8000c18:	bcf0      	pop	{r4, r5, r6, r7}
 8000c1a:	3801      	subs	r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <memcpy>:
 8000c20:	4684      	mov	ip, r0
 8000c22:	ea41 0300 	orr.w	r3, r1, r0
 8000c26:	f013 0303 	ands.w	r3, r3, #3
 8000c2a:	d16d      	bne.n	8000d08 <memcpy+0xe8>
 8000c2c:	3a40      	subs	r2, #64	; 0x40
 8000c2e:	d341      	bcc.n	8000cb4 <memcpy+0x94>
 8000c30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c34:	f840 3b04 	str.w	r3, [r0], #4
 8000c38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c3c:	f840 3b04 	str.w	r3, [r0], #4
 8000c40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c44:	f840 3b04 	str.w	r3, [r0], #4
 8000c48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c4c:	f840 3b04 	str.w	r3, [r0], #4
 8000c50:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c54:	f840 3b04 	str.w	r3, [r0], #4
 8000c58:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c5c:	f840 3b04 	str.w	r3, [r0], #4
 8000c60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c64:	f840 3b04 	str.w	r3, [r0], #4
 8000c68:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c6c:	f840 3b04 	str.w	r3, [r0], #4
 8000c70:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c74:	f840 3b04 	str.w	r3, [r0], #4
 8000c78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c7c:	f840 3b04 	str.w	r3, [r0], #4
 8000c80:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c84:	f840 3b04 	str.w	r3, [r0], #4
 8000c88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c8c:	f840 3b04 	str.w	r3, [r0], #4
 8000c90:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c94:	f840 3b04 	str.w	r3, [r0], #4
 8000c98:	f851 3b04 	ldr.w	r3, [r1], #4
 8000c9c:	f840 3b04 	str.w	r3, [r0], #4
 8000ca0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ca4:	f840 3b04 	str.w	r3, [r0], #4
 8000ca8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cac:	f840 3b04 	str.w	r3, [r0], #4
 8000cb0:	3a40      	subs	r2, #64	; 0x40
 8000cb2:	d2bd      	bcs.n	8000c30 <memcpy+0x10>
 8000cb4:	3230      	adds	r2, #48	; 0x30
 8000cb6:	d311      	bcc.n	8000cdc <memcpy+0xbc>
 8000cb8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cbc:	f840 3b04 	str.w	r3, [r0], #4
 8000cc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cc4:	f840 3b04 	str.w	r3, [r0], #4
 8000cc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ccc:	f840 3b04 	str.w	r3, [r0], #4
 8000cd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cd4:	f840 3b04 	str.w	r3, [r0], #4
 8000cd8:	3a10      	subs	r2, #16
 8000cda:	d2ed      	bcs.n	8000cb8 <memcpy+0x98>
 8000cdc:	320c      	adds	r2, #12
 8000cde:	d305      	bcc.n	8000cec <memcpy+0xcc>
 8000ce0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ce4:	f840 3b04 	str.w	r3, [r0], #4
 8000ce8:	3a04      	subs	r2, #4
 8000cea:	d2f9      	bcs.n	8000ce0 <memcpy+0xc0>
 8000cec:	3204      	adds	r2, #4
 8000cee:	d008      	beq.n	8000d02 <memcpy+0xe2>
 8000cf0:	07d2      	lsls	r2, r2, #31
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000cf8:	f800 3b01 	strbne.w	r3, [r0], #1
 8000cfc:	d301      	bcc.n	8000d02 <memcpy+0xe2>
 8000cfe:	880b      	ldrh	r3, [r1, #0]
 8000d00:	8003      	strh	r3, [r0, #0]
 8000d02:	4660      	mov	r0, ip
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	2a08      	cmp	r2, #8
 8000d0a:	d313      	bcc.n	8000d34 <memcpy+0x114>
 8000d0c:	078b      	lsls	r3, r1, #30
 8000d0e:	d08d      	beq.n	8000c2c <memcpy+0xc>
 8000d10:	f010 0303 	ands.w	r3, r0, #3
 8000d14:	d08a      	beq.n	8000c2c <memcpy+0xc>
 8000d16:	f1c3 0304 	rsb	r3, r3, #4
 8000d1a:	1ad2      	subs	r2, r2, r3
 8000d1c:	07db      	lsls	r3, r3, #31
 8000d1e:	bf1c      	itt	ne
 8000d20:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000d24:	f800 3b01 	strbne.w	r3, [r0], #1
 8000d28:	d380      	bcc.n	8000c2c <memcpy+0xc>
 8000d2a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000d2e:	f820 3b02 	strh.w	r3, [r0], #2
 8000d32:	e77b      	b.n	8000c2c <memcpy+0xc>
 8000d34:	3a04      	subs	r2, #4
 8000d36:	d3d9      	bcc.n	8000cec <memcpy+0xcc>
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d3e:	f800 3b01 	strb.w	r3, [r0], #1
 8000d42:	d2f9      	bcs.n	8000d38 <memcpy+0x118>
 8000d44:	780b      	ldrb	r3, [r1, #0]
 8000d46:	7003      	strb	r3, [r0, #0]
 8000d48:	784b      	ldrb	r3, [r1, #1]
 8000d4a:	7043      	strb	r3, [r0, #1]
 8000d4c:	788b      	ldrb	r3, [r1, #2]
 8000d4e:	7083      	strb	r3, [r0, #2]
 8000d50:	4660      	mov	r0, ip
 8000d52:	4770      	bx	lr

08000d54 <memmove>:
 8000d54:	4288      	cmp	r0, r1
 8000d56:	b4f0      	push	{r4, r5, r6, r7}
 8000d58:	d90d      	bls.n	8000d76 <memmove+0x22>
 8000d5a:	188b      	adds	r3, r1, r2
 8000d5c:	4283      	cmp	r3, r0
 8000d5e:	d90a      	bls.n	8000d76 <memmove+0x22>
 8000d60:	1884      	adds	r4, r0, r2
 8000d62:	b132      	cbz	r2, 8000d72 <memmove+0x1e>
 8000d64:	4622      	mov	r2, r4
 8000d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000d6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d1f9      	bne.n	8000d66 <memmove+0x12>
 8000d72:	bcf0      	pop	{r4, r5, r6, r7}
 8000d74:	4770      	bx	lr
 8000d76:	2a0f      	cmp	r2, #15
 8000d78:	d80e      	bhi.n	8000d98 <memmove+0x44>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	1e54      	subs	r4, r2, #1
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d0f7      	beq.n	8000d72 <memmove+0x1e>
 8000d82:	3401      	adds	r4, #1
 8000d84:	440c      	add	r4, r1
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000d8c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000d90:	42a1      	cmp	r1, r4
 8000d92:	d1f9      	bne.n	8000d88 <memmove+0x34>
 8000d94:	bcf0      	pop	{r4, r5, r6, r7}
 8000d96:	4770      	bx	lr
 8000d98:	ea40 0301 	orr.w	r3, r0, r1
 8000d9c:	079b      	lsls	r3, r3, #30
 8000d9e:	d13b      	bne.n	8000e18 <memmove+0xc4>
 8000da0:	f1a2 0710 	sub.w	r7, r2, #16
 8000da4:	093f      	lsrs	r7, r7, #4
 8000da6:	f101 0620 	add.w	r6, r1, #32
 8000daa:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8000dae:	f101 0310 	add.w	r3, r1, #16
 8000db2:	f100 0410 	add.w	r4, r0, #16
 8000db6:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8000dba:	f844 5c10 	str.w	r5, [r4, #-16]
 8000dbe:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8000dc2:	f844 5c0c 	str.w	r5, [r4, #-12]
 8000dc6:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8000dca:	f844 5c08 	str.w	r5, [r4, #-8]
 8000dce:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8000dd2:	f844 5c04 	str.w	r5, [r4, #-4]
 8000dd6:	3310      	adds	r3, #16
 8000dd8:	42b3      	cmp	r3, r6
 8000dda:	f104 0410 	add.w	r4, r4, #16
 8000dde:	d1ea      	bne.n	8000db6 <memmove+0x62>
 8000de0:	1c7b      	adds	r3, r7, #1
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	f012 0f0c 	tst.w	r2, #12
 8000de8:	4419      	add	r1, r3
 8000dea:	f002 050f 	and.w	r5, r2, #15
 8000dee:	4403      	add	r3, r0
 8000df0:	d015      	beq.n	8000e1e <memmove+0xca>
 8000df2:	3d04      	subs	r5, #4
 8000df4:	08ad      	lsrs	r5, r5, #2
 8000df6:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
 8000dfa:	1f1c      	subs	r4, r3, #4
 8000dfc:	460e      	mov	r6, r1
 8000dfe:	f856 7b04 	ldr.w	r7, [r6], #4
 8000e02:	f844 7f04 	str.w	r7, [r4, #4]!
 8000e06:	4564      	cmp	r4, ip
 8000e08:	d1f9      	bne.n	8000dfe <memmove+0xaa>
 8000e0a:	3501      	adds	r5, #1
 8000e0c:	00ad      	lsls	r5, r5, #2
 8000e0e:	442b      	add	r3, r5
 8000e10:	4429      	add	r1, r5
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	e7b1      	b.n	8000d7c <memmove+0x28>
 8000e18:	1e54      	subs	r4, r2, #1
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e7b1      	b.n	8000d82 <memmove+0x2e>
 8000e1e:	462a      	mov	r2, r5
 8000e20:	e7ac      	b.n	8000d7c <memmove+0x28>
 8000e22:	bf00      	nop

08000e24 <_free_r>:
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d03c      	beq.n	8000ea2 <_free_r+0x7e>
 8000e28:	b538      	push	{r3, r4, r5, lr}
 8000e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e2e:	1f0c      	subs	r4, r1, #4
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	bfb8      	it	lt
 8000e34:	18e4      	addlt	r4, r4, r3
 8000e36:	4605      	mov	r5, r0
 8000e38:	f000 f8e6 	bl	8001008 <__malloc_lock>
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <_free_r+0xa8>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	b12a      	cbz	r2, 8000e4e <_free_r+0x2a>
 8000e42:	42a2      	cmp	r2, r4
 8000e44:	d90d      	bls.n	8000e62 <_free_r+0x3e>
 8000e46:	6821      	ldr	r1, [r4, #0]
 8000e48:	1860      	adds	r0, r4, r1
 8000e4a:	4282      	cmp	r2, r0
 8000e4c:	d023      	beq.n	8000e96 <_free_r+0x72>
 8000e4e:	6062      	str	r2, [r4, #4]
 8000e50:	4628      	mov	r0, r5
 8000e52:	601c      	str	r4, [r3, #0]
 8000e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e58:	f000 b8d8 	b.w	800100c <__malloc_unlock>
 8000e5c:	42a3      	cmp	r3, r4
 8000e5e:	d803      	bhi.n	8000e68 <_free_r+0x44>
 8000e60:	461a      	mov	r2, r3
 8000e62:	6853      	ldr	r3, [r2, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f9      	bne.n	8000e5c <_free_r+0x38>
 8000e68:	6811      	ldr	r1, [r2, #0]
 8000e6a:	1850      	adds	r0, r2, r1
 8000e6c:	42a0      	cmp	r0, r4
 8000e6e:	d019      	beq.n	8000ea4 <_free_r+0x80>
 8000e70:	d824      	bhi.n	8000ebc <_free_r+0x98>
 8000e72:	6821      	ldr	r1, [r4, #0]
 8000e74:	1860      	adds	r0, r4, r1
 8000e76:	4283      	cmp	r3, r0
 8000e78:	d006      	beq.n	8000e88 <_free_r+0x64>
 8000e7a:	6063      	str	r3, [r4, #4]
 8000e7c:	6054      	str	r4, [r2, #4]
 8000e7e:	4628      	mov	r0, r5
 8000e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e84:	f000 b8c2 	b.w	800100c <__malloc_unlock>
 8000e88:	e9d3 0300 	ldrd	r0, r3, [r3]
 8000e8c:	4401      	add	r1, r0
 8000e8e:	6063      	str	r3, [r4, #4]
 8000e90:	6021      	str	r1, [r4, #0]
 8000e92:	6054      	str	r4, [r2, #4]
 8000e94:	e7f3      	b.n	8000e7e <_free_r+0x5a>
 8000e96:	e9d2 0200 	ldrd	r0, r2, [r2]
 8000e9a:	4401      	add	r1, r0
 8000e9c:	6062      	str	r2, [r4, #4]
 8000e9e:	6021      	str	r1, [r4, #0]
 8000ea0:	e7d6      	b.n	8000e50 <_free_r+0x2c>
 8000ea2:	4770      	bx	lr
 8000ea4:	6820      	ldr	r0, [r4, #0]
 8000ea6:	4401      	add	r1, r0
 8000ea8:	1850      	adds	r0, r2, r1
 8000eaa:	4283      	cmp	r3, r0
 8000eac:	6011      	str	r1, [r2, #0]
 8000eae:	d1e6      	bne.n	8000e7e <_free_r+0x5a>
 8000eb0:	e9d3 0300 	ldrd	r0, r3, [r3]
 8000eb4:	4401      	add	r1, r0
 8000eb6:	6053      	str	r3, [r2, #4]
 8000eb8:	6011      	str	r1, [r2, #0]
 8000eba:	e7e0      	b.n	8000e7e <_free_r+0x5a>
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	602b      	str	r3, [r5, #0]
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec6:	f000 b8a1 	b.w	800100c <__malloc_unlock>
 8000eca:	bf00      	nop
 8000ecc:	2000008c 	.word	0x2000008c

08000ed0 <_malloc_r>:
 8000ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed2:	1ccd      	adds	r5, r1, #3
 8000ed4:	f025 0503 	bic.w	r5, r5, #3
 8000ed8:	3508      	adds	r5, #8
 8000eda:	2d0c      	cmp	r5, #12
 8000edc:	bf38      	it	cc
 8000ede:	250c      	movcc	r5, #12
 8000ee0:	2d00      	cmp	r5, #0
 8000ee2:	4606      	mov	r6, r0
 8000ee4:	db33      	blt.n	8000f4e <_malloc_r+0x7e>
 8000ee6:	42a9      	cmp	r1, r5
 8000ee8:	d831      	bhi.n	8000f4e <_malloc_r+0x7e>
 8000eea:	4f2a      	ldr	r7, [pc, #168]	; (8000f94 <_malloc_r+0xc4>)
 8000eec:	f000 f88c 	bl	8001008 <__malloc_lock>
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	b152      	cbz	r2, 8000f0a <_malloc_r+0x3a>
 8000ef4:	6813      	ldr	r3, [r2, #0]
 8000ef6:	1b5b      	subs	r3, r3, r5
 8000ef8:	d404      	bmi.n	8000f04 <_malloc_r+0x34>
 8000efa:	e03f      	b.n	8000f7c <_malloc_r+0xac>
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	1b5b      	subs	r3, r3, r5
 8000f00:	d529      	bpl.n	8000f56 <_malloc_r+0x86>
 8000f02:	4622      	mov	r2, r4
 8000f04:	6854      	ldr	r4, [r2, #4]
 8000f06:	2c00      	cmp	r4, #0
 8000f08:	d1f8      	bne.n	8000efc <_malloc_r+0x2c>
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	2900      	cmp	r1, #0
 8000f0e:	d03b      	beq.n	8000f88 <_malloc_r+0xb8>
 8000f10:	4629      	mov	r1, r5
 8000f12:	4630      	mov	r0, r6
 8000f14:	f000 f866 	bl	8000fe4 <_sbrk_r>
 8000f18:	1c43      	adds	r3, r0, #1
 8000f1a:	d028      	beq.n	8000f6e <_malloc_r+0x9e>
 8000f1c:	1cc4      	adds	r4, r0, #3
 8000f1e:	f024 0403 	bic.w	r4, r4, #3
 8000f22:	42a0      	cmp	r0, r4
 8000f24:	d005      	beq.n	8000f32 <_malloc_r+0x62>
 8000f26:	1a21      	subs	r1, r4, r0
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f000 f85b 	bl	8000fe4 <_sbrk_r>
 8000f2e:	3001      	adds	r0, #1
 8000f30:	d01d      	beq.n	8000f6e <_malloc_r+0x9e>
 8000f32:	6025      	str	r5, [r4, #0]
 8000f34:	4630      	mov	r0, r6
 8000f36:	f000 f869 	bl	800100c <__malloc_unlock>
 8000f3a:	f104 000b 	add.w	r0, r4, #11
 8000f3e:	f020 0007 	bic.w	r0, r0, #7
 8000f42:	1d23      	adds	r3, r4, #4
 8000f44:	1ac2      	subs	r2, r0, r3
 8000f46:	d001      	beq.n	8000f4c <_malloc_r+0x7c>
 8000f48:	1a1b      	subs	r3, r3, r0
 8000f4a:	50a3      	str	r3, [r4, r2]
 8000f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f4e:	220c      	movs	r2, #12
 8000f50:	6032      	str	r2, [r6, #0]
 8000f52:	2000      	movs	r0, #0
 8000f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f56:	2b0b      	cmp	r3, #11
 8000f58:	d805      	bhi.n	8000f66 <_malloc_r+0x96>
 8000f5a:	42a2      	cmp	r2, r4
 8000f5c:	6863      	ldr	r3, [r4, #4]
 8000f5e:	d011      	beq.n	8000f84 <_malloc_r+0xb4>
 8000f60:	6053      	str	r3, [r2, #4]
 8000f62:	e7e7      	b.n	8000f34 <_malloc_r+0x64>
 8000f64:	4614      	mov	r4, r2
 8000f66:	6023      	str	r3, [r4, #0]
 8000f68:	441c      	add	r4, r3
 8000f6a:	6025      	str	r5, [r4, #0]
 8000f6c:	e7e2      	b.n	8000f34 <_malloc_r+0x64>
 8000f6e:	230c      	movs	r3, #12
 8000f70:	4630      	mov	r0, r6
 8000f72:	6033      	str	r3, [r6, #0]
 8000f74:	f000 f84a 	bl	800100c <__malloc_unlock>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f7c:	2b0b      	cmp	r3, #11
 8000f7e:	d8f1      	bhi.n	8000f64 <_malloc_r+0x94>
 8000f80:	6853      	ldr	r3, [r2, #4]
 8000f82:	4614      	mov	r4, r2
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	e7d5      	b.n	8000f34 <_malloc_r+0x64>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	f000 f82b 	bl	8000fe4 <_sbrk_r>
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	e7be      	b.n	8000f10 <_malloc_r+0x40>
 8000f92:	bf00      	nop
 8000f94:	2000008c 	.word	0x2000008c

08000f98 <_realloc_r>:
 8000f98:	b309      	cbz	r1, 8000fde <_realloc_r+0x46>
 8000f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9c:	4614      	mov	r4, r2
 8000f9e:	b1ca      	cbz	r2, 8000fd4 <_realloc_r+0x3c>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	460d      	mov	r5, r1
 8000fa4:	f000 f834 	bl	8001010 <_malloc_usable_size_r>
 8000fa8:	42a0      	cmp	r0, r4
 8000faa:	d302      	bcc.n	8000fb2 <_realloc_r+0x1a>
 8000fac:	462f      	mov	r7, r5
 8000fae:	4638      	mov	r0, r7
 8000fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	f7ff ff8b 	bl	8000ed0 <_malloc_r>
 8000fba:	4607      	mov	r7, r0
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	d0f6      	beq.n	8000fae <_realloc_r+0x16>
 8000fc0:	4622      	mov	r2, r4
 8000fc2:	4629      	mov	r1, r5
 8000fc4:	f7ff fe2c 	bl	8000c20 <memcpy>
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4629      	mov	r1, r5
 8000fcc:	f7ff ff2a 	bl	8000e24 <_free_r>
 8000fd0:	4638      	mov	r0, r7
 8000fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fd4:	4627      	mov	r7, r4
 8000fd6:	f7ff ff25 	bl	8000e24 <_free_r>
 8000fda:	4638      	mov	r0, r7
 8000fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fde:	4611      	mov	r1, r2
 8000fe0:	f7ff bf76 	b.w	8000ed0 <_malloc_r>

08000fe4 <_sbrk_r>:
 8000fe4:	b538      	push	{r3, r4, r5, lr}
 8000fe6:	4c07      	ldr	r4, [pc, #28]	; (8001004 <_sbrk_r+0x20>)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	4605      	mov	r5, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	6023      	str	r3, [r4, #0]
 8000ff0:	f001 fb66 	bl	80026c0 <_sbrk>
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	d000      	beq.n	8000ffa <_sbrk_r+0x16>
 8000ff8:	bd38      	pop	{r3, r4, r5, pc}
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0fb      	beq.n	8000ff8 <_sbrk_r+0x14>
 8001000:	602b      	str	r3, [r5, #0]
 8001002:	bd38      	pop	{r3, r4, r5, pc}
 8001004:	200002b8 	.word	0x200002b8

08001008 <__malloc_lock>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <__malloc_unlock>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <_malloc_usable_size_r>:
 8001010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001014:	1f18      	subs	r0, r3, #4
 8001016:	2b00      	cmp	r3, #0
 8001018:	bfbc      	itt	lt
 800101a:	580b      	ldrlt	r3, [r1, r0]
 800101c:	18c0      	addlt	r0, r0, r3
 800101e:	4770      	bx	lr

08001020 <__aeabi_drsub>:
 8001020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8001024:	e002      	b.n	800102c <__adddf3>
 8001026:	bf00      	nop

08001028 <__aeabi_dsub>:
 8001028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800102c <__adddf3>:
 800102c:	b530      	push	{r4, r5, lr}
 800102e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001032:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001036:	ea94 0f05 	teq	r4, r5
 800103a:	bf08      	it	eq
 800103c:	ea90 0f02 	teqeq	r0, r2
 8001040:	bf1f      	itttt	ne
 8001042:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001046:	ea55 0c02 	orrsne.w	ip, r5, r2
 800104a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800104e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001052:	f000 80e2 	beq.w	800121a <__adddf3+0x1ee>
 8001056:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800105a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800105e:	bfb8      	it	lt
 8001060:	426d      	neglt	r5, r5
 8001062:	dd0c      	ble.n	800107e <__adddf3+0x52>
 8001064:	442c      	add	r4, r5
 8001066:	ea80 0202 	eor.w	r2, r0, r2
 800106a:	ea81 0303 	eor.w	r3, r1, r3
 800106e:	ea82 0000 	eor.w	r0, r2, r0
 8001072:	ea83 0101 	eor.w	r1, r3, r1
 8001076:	ea80 0202 	eor.w	r2, r0, r2
 800107a:	ea81 0303 	eor.w	r3, r1, r3
 800107e:	2d36      	cmp	r5, #54	; 0x36
 8001080:	bf88      	it	hi
 8001082:	bd30      	pophi	{r4, r5, pc}
 8001084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001088:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800108c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8001090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8001094:	d002      	beq.n	800109c <__adddf3+0x70>
 8001096:	4240      	negs	r0, r0
 8001098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800109c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80010a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80010a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80010a8:	d002      	beq.n	80010b0 <__adddf3+0x84>
 80010aa:	4252      	negs	r2, r2
 80010ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010b0:	ea94 0f05 	teq	r4, r5
 80010b4:	f000 80a7 	beq.w	8001206 <__adddf3+0x1da>
 80010b8:	f1a4 0401 	sub.w	r4, r4, #1
 80010bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80010c0:	db0d      	blt.n	80010de <__adddf3+0xb2>
 80010c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80010c6:	fa22 f205 	lsr.w	r2, r2, r5
 80010ca:	1880      	adds	r0, r0, r2
 80010cc:	f141 0100 	adc.w	r1, r1, #0
 80010d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80010d4:	1880      	adds	r0, r0, r2
 80010d6:	fa43 f305 	asr.w	r3, r3, r5
 80010da:	4159      	adcs	r1, r3
 80010dc:	e00e      	b.n	80010fc <__adddf3+0xd0>
 80010de:	f1a5 0520 	sub.w	r5, r5, #32
 80010e2:	f10e 0e20 	add.w	lr, lr, #32
 80010e6:	2a01      	cmp	r2, #1
 80010e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80010ec:	bf28      	it	cs
 80010ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80010f2:	fa43 f305 	asr.w	r3, r3, r5
 80010f6:	18c0      	adds	r0, r0, r3
 80010f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80010fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001100:	d507      	bpl.n	8001112 <__adddf3+0xe6>
 8001102:	f04f 0e00 	mov.w	lr, #0
 8001106:	f1dc 0c00 	rsbs	ip, ip, #0
 800110a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800110e:	eb6e 0101 	sbc.w	r1, lr, r1
 8001112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001116:	d31b      	bcc.n	8001150 <__adddf3+0x124>
 8001118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800111c:	d30c      	bcc.n	8001138 <__adddf3+0x10c>
 800111e:	0849      	lsrs	r1, r1, #1
 8001120:	ea5f 0030 	movs.w	r0, r0, rrx
 8001124:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8001128:	f104 0401 	add.w	r4, r4, #1
 800112c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8001134:	f080 809a 	bcs.w	800126c <__adddf3+0x240>
 8001138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800113c:	bf08      	it	eq
 800113e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001142:	f150 0000 	adcs.w	r0, r0, #0
 8001146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800114a:	ea41 0105 	orr.w	r1, r1, r5
 800114e:	bd30      	pop	{r4, r5, pc}
 8001150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001154:	4140      	adcs	r0, r0
 8001156:	eb41 0101 	adc.w	r1, r1, r1
 800115a:	3c01      	subs	r4, #1
 800115c:	bf28      	it	cs
 800115e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8001162:	d2e9      	bcs.n	8001138 <__adddf3+0x10c>
 8001164:	f091 0f00 	teq	r1, #0
 8001168:	bf04      	itt	eq
 800116a:	4601      	moveq	r1, r0
 800116c:	2000      	moveq	r0, #0
 800116e:	fab1 f381 	clz	r3, r1
 8001172:	bf08      	it	eq
 8001174:	3320      	addeq	r3, #32
 8001176:	f1a3 030b 	sub.w	r3, r3, #11
 800117a:	f1b3 0220 	subs.w	r2, r3, #32
 800117e:	da0c      	bge.n	800119a <__adddf3+0x16e>
 8001180:	320c      	adds	r2, #12
 8001182:	dd08      	ble.n	8001196 <__adddf3+0x16a>
 8001184:	f102 0c14 	add.w	ip, r2, #20
 8001188:	f1c2 020c 	rsb	r2, r2, #12
 800118c:	fa01 f00c 	lsl.w	r0, r1, ip
 8001190:	fa21 f102 	lsr.w	r1, r1, r2
 8001194:	e00c      	b.n	80011b0 <__adddf3+0x184>
 8001196:	f102 0214 	add.w	r2, r2, #20
 800119a:	bfd8      	it	le
 800119c:	f1c2 0c20 	rsble	ip, r2, #32
 80011a0:	fa01 f102 	lsl.w	r1, r1, r2
 80011a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80011a8:	bfdc      	itt	le
 80011aa:	ea41 010c 	orrle.w	r1, r1, ip
 80011ae:	4090      	lslle	r0, r2
 80011b0:	1ae4      	subs	r4, r4, r3
 80011b2:	bfa2      	ittt	ge
 80011b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80011b8:	4329      	orrge	r1, r5
 80011ba:	bd30      	popge	{r4, r5, pc}
 80011bc:	ea6f 0404 	mvn.w	r4, r4
 80011c0:	3c1f      	subs	r4, #31
 80011c2:	da1c      	bge.n	80011fe <__adddf3+0x1d2>
 80011c4:	340c      	adds	r4, #12
 80011c6:	dc0e      	bgt.n	80011e6 <__adddf3+0x1ba>
 80011c8:	f104 0414 	add.w	r4, r4, #20
 80011cc:	f1c4 0220 	rsb	r2, r4, #32
 80011d0:	fa20 f004 	lsr.w	r0, r0, r4
 80011d4:	fa01 f302 	lsl.w	r3, r1, r2
 80011d8:	ea40 0003 	orr.w	r0, r0, r3
 80011dc:	fa21 f304 	lsr.w	r3, r1, r4
 80011e0:	ea45 0103 	orr.w	r1, r5, r3
 80011e4:	bd30      	pop	{r4, r5, pc}
 80011e6:	f1c4 040c 	rsb	r4, r4, #12
 80011ea:	f1c4 0220 	rsb	r2, r4, #32
 80011ee:	fa20 f002 	lsr.w	r0, r0, r2
 80011f2:	fa01 f304 	lsl.w	r3, r1, r4
 80011f6:	ea40 0003 	orr.w	r0, r0, r3
 80011fa:	4629      	mov	r1, r5
 80011fc:	bd30      	pop	{r4, r5, pc}
 80011fe:	fa21 f004 	lsr.w	r0, r1, r4
 8001202:	4629      	mov	r1, r5
 8001204:	bd30      	pop	{r4, r5, pc}
 8001206:	f094 0f00 	teq	r4, #0
 800120a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800120e:	bf06      	itte	eq
 8001210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8001214:	3401      	addeq	r4, #1
 8001216:	3d01      	subne	r5, #1
 8001218:	e74e      	b.n	80010b8 <__adddf3+0x8c>
 800121a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800121e:	bf18      	it	ne
 8001220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001224:	d029      	beq.n	800127a <__adddf3+0x24e>
 8001226:	ea94 0f05 	teq	r4, r5
 800122a:	bf08      	it	eq
 800122c:	ea90 0f02 	teqeq	r0, r2
 8001230:	d005      	beq.n	800123e <__adddf3+0x212>
 8001232:	ea54 0c00 	orrs.w	ip, r4, r0
 8001236:	bf04      	itt	eq
 8001238:	4619      	moveq	r1, r3
 800123a:	4610      	moveq	r0, r2
 800123c:	bd30      	pop	{r4, r5, pc}
 800123e:	ea91 0f03 	teq	r1, r3
 8001242:	bf1e      	ittt	ne
 8001244:	2100      	movne	r1, #0
 8001246:	2000      	movne	r0, #0
 8001248:	bd30      	popne	{r4, r5, pc}
 800124a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800124e:	d105      	bne.n	800125c <__adddf3+0x230>
 8001250:	0040      	lsls	r0, r0, #1
 8001252:	4149      	adcs	r1, r1
 8001254:	bf28      	it	cs
 8001256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800125a:	bd30      	pop	{r4, r5, pc}
 800125c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8001260:	bf3c      	itt	cc
 8001262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8001266:	bd30      	popcc	{r4, r5, pc}
 8001268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800126c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8001270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001274:	f04f 0000 	mov.w	r0, #0
 8001278:	bd30      	pop	{r4, r5, pc}
 800127a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800127e:	bf1a      	itte	ne
 8001280:	4619      	movne	r1, r3
 8001282:	4610      	movne	r0, r2
 8001284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001288:	bf1c      	itt	ne
 800128a:	460b      	movne	r3, r1
 800128c:	4602      	movne	r2, r0
 800128e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001292:	bf06      	itte	eq
 8001294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8001298:	ea91 0f03 	teqeq	r1, r3
 800129c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80012a0:	bd30      	pop	{r4, r5, pc}
 80012a2:	bf00      	nop

080012a4 <__aeabi_ui2d>:
 80012a4:	f090 0f00 	teq	r0, #0
 80012a8:	bf04      	itt	eq
 80012aa:	2100      	moveq	r1, #0
 80012ac:	4770      	bxeq	lr
 80012ae:	b530      	push	{r4, r5, lr}
 80012b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80012b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80012b8:	f04f 0500 	mov.w	r5, #0
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	e750      	b.n	8001164 <__adddf3+0x138>
 80012c2:	bf00      	nop

080012c4 <__aeabi_i2d>:
 80012c4:	f090 0f00 	teq	r0, #0
 80012c8:	bf04      	itt	eq
 80012ca:	2100      	moveq	r1, #0
 80012cc:	4770      	bxeq	lr
 80012ce:	b530      	push	{r4, r5, lr}
 80012d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80012d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80012d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80012dc:	bf48      	it	mi
 80012de:	4240      	negmi	r0, r0
 80012e0:	f04f 0100 	mov.w	r1, #0
 80012e4:	e73e      	b.n	8001164 <__adddf3+0x138>
 80012e6:	bf00      	nop

080012e8 <__aeabi_f2d>:
 80012e8:	0042      	lsls	r2, r0, #1
 80012ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80012ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80012f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80012f6:	bf1f      	itttt	ne
 80012f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80012fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8001300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8001304:	4770      	bxne	lr
 8001306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800130a:	bf08      	it	eq
 800130c:	4770      	bxeq	lr
 800130e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8001312:	bf04      	itt	eq
 8001314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8001318:	4770      	bxeq	lr
 800131a:	b530      	push	{r4, r5, lr}
 800131c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8001320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001328:	e71c      	b.n	8001164 <__adddf3+0x138>
 800132a:	bf00      	nop

0800132c <__aeabi_ul2d>:
 800132c:	ea50 0201 	orrs.w	r2, r0, r1
 8001330:	bf08      	it	eq
 8001332:	4770      	bxeq	lr
 8001334:	b530      	push	{r4, r5, lr}
 8001336:	f04f 0500 	mov.w	r5, #0
 800133a:	e00a      	b.n	8001352 <__aeabi_l2d+0x16>

0800133c <__aeabi_l2d>:
 800133c:	ea50 0201 	orrs.w	r2, r0, r1
 8001340:	bf08      	it	eq
 8001342:	4770      	bxeq	lr
 8001344:	b530      	push	{r4, r5, lr}
 8001346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800134a:	d502      	bpl.n	8001352 <__aeabi_l2d+0x16>
 800134c:	4240      	negs	r0, r0
 800134e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001352:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001356:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800135a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800135e:	f43f aed8 	beq.w	8001112 <__adddf3+0xe6>
 8001362:	f04f 0203 	mov.w	r2, #3
 8001366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800136a:	bf18      	it	ne
 800136c:	3203      	addne	r2, #3
 800136e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001372:	bf18      	it	ne
 8001374:	3203      	addne	r2, #3
 8001376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800137a:	f1c2 0320 	rsb	r3, r2, #32
 800137e:	fa00 fc03 	lsl.w	ip, r0, r3
 8001382:	fa20 f002 	lsr.w	r0, r0, r2
 8001386:	fa01 fe03 	lsl.w	lr, r1, r3
 800138a:	ea40 000e 	orr.w	r0, r0, lr
 800138e:	fa21 f102 	lsr.w	r1, r1, r2
 8001392:	4414      	add	r4, r2
 8001394:	e6bd      	b.n	8001112 <__adddf3+0xe6>
 8001396:	bf00      	nop

08001398 <__aeabi_ldivmod>:
 8001398:	b97b      	cbnz	r3, 80013ba <__aeabi_ldivmod+0x22>
 800139a:	b972      	cbnz	r2, 80013ba <__aeabi_ldivmod+0x22>
 800139c:	2900      	cmp	r1, #0
 800139e:	bfbe      	ittt	lt
 80013a0:	2000      	movlt	r0, #0
 80013a2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80013a6:	e006      	blt.n	80013b6 <__aeabi_ldivmod+0x1e>
 80013a8:	bf08      	it	eq
 80013aa:	2800      	cmpeq	r0, #0
 80013ac:	bf1c      	itt	ne
 80013ae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80013b2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80013b6:	f000 b9b9 	b.w	800172c <__aeabi_idiv0>
 80013ba:	f1ad 0c08 	sub.w	ip, sp, #8
 80013be:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80013c2:	2900      	cmp	r1, #0
 80013c4:	db09      	blt.n	80013da <__aeabi_ldivmod+0x42>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db1a      	blt.n	8001400 <__aeabi_ldivmod+0x68>
 80013ca:	f000 f84d 	bl	8001468 <__udivmoddi4>
 80013ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80013d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80013d6:	b004      	add	sp, #16
 80013d8:	4770      	bx	lr
 80013da:	4240      	negs	r0, r0
 80013dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db1b      	blt.n	800141c <__aeabi_ldivmod+0x84>
 80013e4:	f000 f840 	bl	8001468 <__udivmoddi4>
 80013e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80013ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80013f0:	b004      	add	sp, #16
 80013f2:	4240      	negs	r0, r0
 80013f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80013f8:	4252      	negs	r2, r2
 80013fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80013fe:	4770      	bx	lr
 8001400:	4252      	negs	r2, r2
 8001402:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001406:	f000 f82f 	bl	8001468 <__udivmoddi4>
 800140a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800140e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001412:	b004      	add	sp, #16
 8001414:	4240      	negs	r0, r0
 8001416:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800141a:	4770      	bx	lr
 800141c:	4252      	negs	r2, r2
 800141e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001422:	f000 f821 	bl	8001468 <__udivmoddi4>
 8001426:	f8dd e004 	ldr.w	lr, [sp, #4]
 800142a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800142e:	b004      	add	sp, #16
 8001430:	4252      	negs	r2, r2
 8001432:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001436:	4770      	bx	lr

08001438 <__aeabi_uldivmod>:
 8001438:	b953      	cbnz	r3, 8001450 <__aeabi_uldivmod+0x18>
 800143a:	b94a      	cbnz	r2, 8001450 <__aeabi_uldivmod+0x18>
 800143c:	2900      	cmp	r1, #0
 800143e:	bf08      	it	eq
 8001440:	2800      	cmpeq	r0, #0
 8001442:	bf1c      	itt	ne
 8001444:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001448:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800144c:	f000 b96e 	b.w	800172c <__aeabi_idiv0>
 8001450:	f1ad 0c08 	sub.w	ip, sp, #8
 8001454:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001458:	f000 f806 	bl	8001468 <__udivmoddi4>
 800145c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001460:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001464:	b004      	add	sp, #16
 8001466:	4770      	bx	lr

08001468 <__udivmoddi4>:
 8001468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800146c:	9d08      	ldr	r5, [sp, #32]
 800146e:	4604      	mov	r4, r0
 8001470:	468c      	mov	ip, r1
 8001472:	2b00      	cmp	r3, #0
 8001474:	f040 8083 	bne.w	800157e <__udivmoddi4+0x116>
 8001478:	428a      	cmp	r2, r1
 800147a:	4617      	mov	r7, r2
 800147c:	d947      	bls.n	800150e <__udivmoddi4+0xa6>
 800147e:	fab2 f282 	clz	r2, r2
 8001482:	b142      	cbz	r2, 8001496 <__udivmoddi4+0x2e>
 8001484:	f1c2 0020 	rsb	r0, r2, #32
 8001488:	fa24 f000 	lsr.w	r0, r4, r0
 800148c:	4091      	lsls	r1, r2
 800148e:	4097      	lsls	r7, r2
 8001490:	ea40 0c01 	orr.w	ip, r0, r1
 8001494:	4094      	lsls	r4, r2
 8001496:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800149a:	0c23      	lsrs	r3, r4, #16
 800149c:	fbbc f6f8 	udiv	r6, ip, r8
 80014a0:	fa1f fe87 	uxth.w	lr, r7
 80014a4:	fb08 c116 	mls	r1, r8, r6, ip
 80014a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014ac:	fb06 f10e 	mul.w	r1, r6, lr
 80014b0:	4299      	cmp	r1, r3
 80014b2:	d909      	bls.n	80014c8 <__udivmoddi4+0x60>
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80014ba:	f080 8119 	bcs.w	80016f0 <__udivmoddi4+0x288>
 80014be:	4299      	cmp	r1, r3
 80014c0:	f240 8116 	bls.w	80016f0 <__udivmoddi4+0x288>
 80014c4:	3e02      	subs	r6, #2
 80014c6:	443b      	add	r3, r7
 80014c8:	1a5b      	subs	r3, r3, r1
 80014ca:	b2a4      	uxth	r4, r4
 80014cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80014d0:	fb08 3310 	mls	r3, r8, r0, r3
 80014d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80014d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80014dc:	45a6      	cmp	lr, r4
 80014de:	d909      	bls.n	80014f4 <__udivmoddi4+0x8c>
 80014e0:	193c      	adds	r4, r7, r4
 80014e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80014e6:	f080 8105 	bcs.w	80016f4 <__udivmoddi4+0x28c>
 80014ea:	45a6      	cmp	lr, r4
 80014ec:	f240 8102 	bls.w	80016f4 <__udivmoddi4+0x28c>
 80014f0:	3802      	subs	r0, #2
 80014f2:	443c      	add	r4, r7
 80014f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80014f8:	eba4 040e 	sub.w	r4, r4, lr
 80014fc:	2600      	movs	r6, #0
 80014fe:	b11d      	cbz	r5, 8001508 <__udivmoddi4+0xa0>
 8001500:	40d4      	lsrs	r4, r2
 8001502:	2300      	movs	r3, #0
 8001504:	e9c5 4300 	strd	r4, r3, [r5]
 8001508:	4631      	mov	r1, r6
 800150a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800150e:	b902      	cbnz	r2, 8001512 <__udivmoddi4+0xaa>
 8001510:	deff      	udf	#255	; 0xff
 8001512:	fab2 f282 	clz	r2, r2
 8001516:	2a00      	cmp	r2, #0
 8001518:	d150      	bne.n	80015bc <__udivmoddi4+0x154>
 800151a:	1bcb      	subs	r3, r1, r7
 800151c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001520:	fa1f f887 	uxth.w	r8, r7
 8001524:	2601      	movs	r6, #1
 8001526:	fbb3 fcfe 	udiv	ip, r3, lr
 800152a:	0c21      	lsrs	r1, r4, #16
 800152c:	fb0e 331c 	mls	r3, lr, ip, r3
 8001530:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001534:	fb08 f30c 	mul.w	r3, r8, ip
 8001538:	428b      	cmp	r3, r1
 800153a:	d907      	bls.n	800154c <__udivmoddi4+0xe4>
 800153c:	1879      	adds	r1, r7, r1
 800153e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8001542:	d202      	bcs.n	800154a <__udivmoddi4+0xe2>
 8001544:	428b      	cmp	r3, r1
 8001546:	f200 80e9 	bhi.w	800171c <__udivmoddi4+0x2b4>
 800154a:	4684      	mov	ip, r0
 800154c:	1ac9      	subs	r1, r1, r3
 800154e:	b2a3      	uxth	r3, r4
 8001550:	fbb1 f0fe 	udiv	r0, r1, lr
 8001554:	fb0e 1110 	mls	r1, lr, r0, r1
 8001558:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800155c:	fb08 f800 	mul.w	r8, r8, r0
 8001560:	45a0      	cmp	r8, r4
 8001562:	d907      	bls.n	8001574 <__udivmoddi4+0x10c>
 8001564:	193c      	adds	r4, r7, r4
 8001566:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800156a:	d202      	bcs.n	8001572 <__udivmoddi4+0x10a>
 800156c:	45a0      	cmp	r8, r4
 800156e:	f200 80d9 	bhi.w	8001724 <__udivmoddi4+0x2bc>
 8001572:	4618      	mov	r0, r3
 8001574:	eba4 0408 	sub.w	r4, r4, r8
 8001578:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800157c:	e7bf      	b.n	80014fe <__udivmoddi4+0x96>
 800157e:	428b      	cmp	r3, r1
 8001580:	d909      	bls.n	8001596 <__udivmoddi4+0x12e>
 8001582:	2d00      	cmp	r5, #0
 8001584:	f000 80b1 	beq.w	80016ea <__udivmoddi4+0x282>
 8001588:	2600      	movs	r6, #0
 800158a:	e9c5 0100 	strd	r0, r1, [r5]
 800158e:	4630      	mov	r0, r6
 8001590:	4631      	mov	r1, r6
 8001592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001596:	fab3 f683 	clz	r6, r3
 800159a:	2e00      	cmp	r6, #0
 800159c:	d14a      	bne.n	8001634 <__udivmoddi4+0x1cc>
 800159e:	428b      	cmp	r3, r1
 80015a0:	d302      	bcc.n	80015a8 <__udivmoddi4+0x140>
 80015a2:	4282      	cmp	r2, r0
 80015a4:	f200 80b8 	bhi.w	8001718 <__udivmoddi4+0x2b0>
 80015a8:	1a84      	subs	r4, r0, r2
 80015aa:	eb61 0103 	sbc.w	r1, r1, r3
 80015ae:	2001      	movs	r0, #1
 80015b0:	468c      	mov	ip, r1
 80015b2:	2d00      	cmp	r5, #0
 80015b4:	d0a8      	beq.n	8001508 <__udivmoddi4+0xa0>
 80015b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80015ba:	e7a5      	b.n	8001508 <__udivmoddi4+0xa0>
 80015bc:	f1c2 0320 	rsb	r3, r2, #32
 80015c0:	fa20 f603 	lsr.w	r6, r0, r3
 80015c4:	4097      	lsls	r7, r2
 80015c6:	fa01 f002 	lsl.w	r0, r1, r2
 80015ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80015ce:	40d9      	lsrs	r1, r3
 80015d0:	4330      	orrs	r0, r6
 80015d2:	0c03      	lsrs	r3, r0, #16
 80015d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80015d8:	fa1f f887 	uxth.w	r8, r7
 80015dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80015e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80015e4:	fb06 f108 	mul.w	r1, r6, r8
 80015e8:	4299      	cmp	r1, r3
 80015ea:	fa04 f402 	lsl.w	r4, r4, r2
 80015ee:	d909      	bls.n	8001604 <__udivmoddi4+0x19c>
 80015f0:	18fb      	adds	r3, r7, r3
 80015f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80015f6:	f080 808d 	bcs.w	8001714 <__udivmoddi4+0x2ac>
 80015fa:	4299      	cmp	r1, r3
 80015fc:	f240 808a 	bls.w	8001714 <__udivmoddi4+0x2ac>
 8001600:	3e02      	subs	r6, #2
 8001602:	443b      	add	r3, r7
 8001604:	1a5b      	subs	r3, r3, r1
 8001606:	b281      	uxth	r1, r0
 8001608:	fbb3 f0fe 	udiv	r0, r3, lr
 800160c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001610:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001614:	fb00 f308 	mul.w	r3, r0, r8
 8001618:	428b      	cmp	r3, r1
 800161a:	d907      	bls.n	800162c <__udivmoddi4+0x1c4>
 800161c:	1879      	adds	r1, r7, r1
 800161e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8001622:	d273      	bcs.n	800170c <__udivmoddi4+0x2a4>
 8001624:	428b      	cmp	r3, r1
 8001626:	d971      	bls.n	800170c <__udivmoddi4+0x2a4>
 8001628:	3802      	subs	r0, #2
 800162a:	4439      	add	r1, r7
 800162c:	1acb      	subs	r3, r1, r3
 800162e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001632:	e778      	b.n	8001526 <__udivmoddi4+0xbe>
 8001634:	f1c6 0c20 	rsb	ip, r6, #32
 8001638:	fa03 f406 	lsl.w	r4, r3, r6
 800163c:	fa22 f30c 	lsr.w	r3, r2, ip
 8001640:	431c      	orrs	r4, r3
 8001642:	fa20 f70c 	lsr.w	r7, r0, ip
 8001646:	fa01 f306 	lsl.w	r3, r1, r6
 800164a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800164e:	fa21 f10c 	lsr.w	r1, r1, ip
 8001652:	431f      	orrs	r7, r3
 8001654:	0c3b      	lsrs	r3, r7, #16
 8001656:	fbb1 f9fe 	udiv	r9, r1, lr
 800165a:	fa1f f884 	uxth.w	r8, r4
 800165e:	fb0e 1119 	mls	r1, lr, r9, r1
 8001662:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001666:	fb09 fa08 	mul.w	sl, r9, r8
 800166a:	458a      	cmp	sl, r1
 800166c:	fa02 f206 	lsl.w	r2, r2, r6
 8001670:	fa00 f306 	lsl.w	r3, r0, r6
 8001674:	d908      	bls.n	8001688 <__udivmoddi4+0x220>
 8001676:	1861      	adds	r1, r4, r1
 8001678:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800167c:	d248      	bcs.n	8001710 <__udivmoddi4+0x2a8>
 800167e:	458a      	cmp	sl, r1
 8001680:	d946      	bls.n	8001710 <__udivmoddi4+0x2a8>
 8001682:	f1a9 0902 	sub.w	r9, r9, #2
 8001686:	4421      	add	r1, r4
 8001688:	eba1 010a 	sub.w	r1, r1, sl
 800168c:	b2bf      	uxth	r7, r7
 800168e:	fbb1 f0fe 	udiv	r0, r1, lr
 8001692:	fb0e 1110 	mls	r1, lr, r0, r1
 8001696:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800169a:	fb00 f808 	mul.w	r8, r0, r8
 800169e:	45b8      	cmp	r8, r7
 80016a0:	d907      	bls.n	80016b2 <__udivmoddi4+0x24a>
 80016a2:	19e7      	adds	r7, r4, r7
 80016a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80016a8:	d22e      	bcs.n	8001708 <__udivmoddi4+0x2a0>
 80016aa:	45b8      	cmp	r8, r7
 80016ac:	d92c      	bls.n	8001708 <__udivmoddi4+0x2a0>
 80016ae:	3802      	subs	r0, #2
 80016b0:	4427      	add	r7, r4
 80016b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80016b6:	eba7 0708 	sub.w	r7, r7, r8
 80016ba:	fba0 8902 	umull	r8, r9, r0, r2
 80016be:	454f      	cmp	r7, r9
 80016c0:	46c6      	mov	lr, r8
 80016c2:	4649      	mov	r1, r9
 80016c4:	d31a      	bcc.n	80016fc <__udivmoddi4+0x294>
 80016c6:	d017      	beq.n	80016f8 <__udivmoddi4+0x290>
 80016c8:	b15d      	cbz	r5, 80016e2 <__udivmoddi4+0x27a>
 80016ca:	ebb3 020e 	subs.w	r2, r3, lr
 80016ce:	eb67 0701 	sbc.w	r7, r7, r1
 80016d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80016d6:	40f2      	lsrs	r2, r6
 80016d8:	ea4c 0202 	orr.w	r2, ip, r2
 80016dc:	40f7      	lsrs	r7, r6
 80016de:	e9c5 2700 	strd	r2, r7, [r5]
 80016e2:	2600      	movs	r6, #0
 80016e4:	4631      	mov	r1, r6
 80016e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016ea:	462e      	mov	r6, r5
 80016ec:	4628      	mov	r0, r5
 80016ee:	e70b      	b.n	8001508 <__udivmoddi4+0xa0>
 80016f0:	4606      	mov	r6, r0
 80016f2:	e6e9      	b.n	80014c8 <__udivmoddi4+0x60>
 80016f4:	4618      	mov	r0, r3
 80016f6:	e6fd      	b.n	80014f4 <__udivmoddi4+0x8c>
 80016f8:	4543      	cmp	r3, r8
 80016fa:	d2e5      	bcs.n	80016c8 <__udivmoddi4+0x260>
 80016fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8001700:	eb69 0104 	sbc.w	r1, r9, r4
 8001704:	3801      	subs	r0, #1
 8001706:	e7df      	b.n	80016c8 <__udivmoddi4+0x260>
 8001708:	4608      	mov	r0, r1
 800170a:	e7d2      	b.n	80016b2 <__udivmoddi4+0x24a>
 800170c:	4660      	mov	r0, ip
 800170e:	e78d      	b.n	800162c <__udivmoddi4+0x1c4>
 8001710:	4681      	mov	r9, r0
 8001712:	e7b9      	b.n	8001688 <__udivmoddi4+0x220>
 8001714:	4666      	mov	r6, ip
 8001716:	e775      	b.n	8001604 <__udivmoddi4+0x19c>
 8001718:	4630      	mov	r0, r6
 800171a:	e74a      	b.n	80015b2 <__udivmoddi4+0x14a>
 800171c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001720:	4439      	add	r1, r7
 8001722:	e713      	b.n	800154c <__udivmoddi4+0xe4>
 8001724:	3802      	subs	r0, #2
 8001726:	443c      	add	r4, r7
 8001728:	e724      	b.n	8001574 <__udivmoddi4+0x10c>
 800172a:	bf00      	nop

0800172c <__aeabi_idiv0>:
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop

08001730 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2203      	movs	r2, #3
 800173c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2203      	movs	r2, #3
 8001754:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2203      	movs	r2, #3
 800175a:	715a      	strb	r2, [r3, #5]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af04      	add	r7, sp, #16
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	460b      	mov	r3, r1
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	b29a      	uxth	r2, r3
 8001786:	8af9      	ldrh	r1, [r7, #22]
 8001788:	f241 3388 	movw	r3, #5000	; 0x1388
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2302      	movs	r3, #2
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2301      	movs	r3, #1
 800179a:	f001 fd7b 	bl	8003294 <HAL_I2C_Mem_Read>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10b      	bne.n	80017bc <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80017a4:	7d7b      	ldrb	r3, [r7, #21]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	7d3b      	ldrb	r3, [r7, #20]
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	4313      	orrs	r3, r2
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	801a      	strh	r2, [r3, #0]
		return true;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <read_register16+0x56>
	} else
		return false;
 80017bc:	2300      	movs	r3, #0

}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80017c6:	b590      	push	{r4, r7, lr}
 80017c8:	b08b      	sub	sp, #44	; 0x2c
 80017ca:	af04      	add	r7, sp, #16
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	461a      	mov	r2, r3
 80017d2:	460b      	mov	r3, r1
 80017d4:	72fb      	strb	r3, [r7, #11]
 80017d6:	4613      	mov	r3, r2
 80017d8:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80017e6:	7afb      	ldrb	r3, [r7, #11]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	7abb      	ldrb	r3, [r7, #10]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	8af9      	ldrh	r1, [r7, #22]
 80017f0:	f241 3488 	movw	r4, #5000	; 0x1388
 80017f4:	9402      	str	r4, [sp, #8]
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2301      	movs	r3, #1
 80017fe:	f001 fd49 	bl	8003294 <HAL_I2C_Mem_Read>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <read_data+0x46>
		return 0;
 8001808:	2300      	movs	r3, #0
 800180a:	e000      	b.n	800180e <read_data+0x48>
	else
		return 1;
 800180c:	2301      	movs	r3, #1

}
 800180e:	4618      	mov	r0, r3
 8001810:	371c      	adds	r7, #28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd90      	pop	{r4, r7, pc}

08001816 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	461a      	mov	r2, r3
 8001822:	2188      	movs	r1, #136	; 0x88
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff9f 	bl	8001768 <read_register16>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d06f      	beq.n	8001910 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3302      	adds	r3, #2
 8001834:	461a      	mov	r2, r3
 8001836:	218a      	movs	r1, #138	; 0x8a
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff95 	bl	8001768 <read_register16>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d065      	beq.n	8001910 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3304      	adds	r3, #4
 8001848:	461a      	mov	r2, r3
 800184a:	218c      	movs	r1, #140	; 0x8c
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff8b 	bl	8001768 <read_register16>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d05b      	beq.n	8001910 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3306      	adds	r3, #6
 800185c:	461a      	mov	r2, r3
 800185e:	218e      	movs	r1, #142	; 0x8e
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff81 	bl	8001768 <read_register16>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d051      	beq.n	8001910 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3308      	adds	r3, #8
 8001870:	461a      	mov	r2, r3
 8001872:	2190      	movs	r1, #144	; 0x90
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff77 	bl	8001768 <read_register16>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d047      	beq.n	8001910 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	330a      	adds	r3, #10
 8001884:	461a      	mov	r2, r3
 8001886:	2192      	movs	r1, #146	; 0x92
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff6d 	bl	8001768 <read_register16>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d03d      	beq.n	8001910 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	330c      	adds	r3, #12
 8001898:	461a      	mov	r2, r3
 800189a:	2194      	movs	r1, #148	; 0x94
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff63 	bl	8001768 <read_register16>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d033      	beq.n	8001910 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	330e      	adds	r3, #14
 80018ac:	461a      	mov	r2, r3
 80018ae:	2196      	movs	r1, #150	; 0x96
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff59 	bl	8001768 <read_register16>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d029      	beq.n	8001910 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3310      	adds	r3, #16
 80018c0:	461a      	mov	r2, r3
 80018c2:	2198      	movs	r1, #152	; 0x98
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff4f 	bl	8001768 <read_register16>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d01f      	beq.n	8001910 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3312      	adds	r3, #18
 80018d4:	461a      	mov	r2, r3
 80018d6:	219a      	movs	r1, #154	; 0x9a
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff45 	bl	8001768 <read_register16>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d015      	beq.n	8001910 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3314      	adds	r3, #20
 80018e8:	461a      	mov	r2, r3
 80018ea:	219c      	movs	r1, #156	; 0x9c
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff3b 	bl	8001768 <read_register16>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00b      	beq.n	8001910 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80018fc:	461a      	mov	r2, r3
 80018fe:	219e      	movs	r1, #158	; 0x9e
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff31 	bl	8001768 <read_register16>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <read_calibration_data+0xfa>

		return true;
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <read_calibration_data+0xfc>
	}

	return false;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800191a:	b580      	push	{r7, lr}
 800191c:	b084      	sub	sp, #16
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f103 0218 	add.w	r2, r3, #24
 8001928:	2301      	movs	r3, #1
 800192a:	21a1      	movs	r1, #161	; 0xa1
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff4a 	bl	80017c6 <read_data>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d14b      	bne.n	80019d0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	331a      	adds	r3, #26
 800193c:	461a      	mov	r2, r3
 800193e:	21e1      	movs	r1, #225	; 0xe1
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff11 	bl	8001768 <read_register16>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d041      	beq.n	80019d0 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f103 021c 	add.w	r2, r3, #28
 8001952:	2301      	movs	r3, #1
 8001954:	21e3      	movs	r1, #227	; 0xe3
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff ff35 	bl	80017c6 <read_data>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d136      	bne.n	80019d0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001962:	f107 030e 	add.w	r3, r7, #14
 8001966:	461a      	mov	r2, r3
 8001968:	21e4      	movs	r1, #228	; 0xe4
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fefc 	bl	8001768 <read_register16>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d02c      	beq.n	80019d0 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	461a      	mov	r2, r3
 800197c:	21e5      	movs	r1, #229	; 0xe5
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fef2 	bl	8001768 <read_register16>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d022      	beq.n	80019d0 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001990:	2301      	movs	r3, #1
 8001992:	21e7      	movs	r1, #231	; 0xe7
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff16 	bl	80017c6 <read_data>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d117      	bne.n	80019d0 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80019a0:	89fb      	ldrh	r3, [r7, #14]
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	89fb      	ldrh	r3, [r7, #14]
 80019ae:	121b      	asrs	r3, r3, #8
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80019c0:	89bb      	ldrh	r3, [r7, #12]
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	841a      	strh	r2, [r3, #32]

		return true;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <read_hum_calibration_data+0xb8>
	}

	return false;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80019da:	b580      	push	{r7, lr}
 80019dc:	b088      	sub	sp, #32
 80019de:	af04      	add	r7, sp, #16
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	460b      	mov	r3, r1
 80019e4:	70fb      	strb	r3, [r7, #3]
 80019e6:	4613      	mov	r3, r2
 80019e8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	89f9      	ldrh	r1, [r7, #14]
 80019fc:	f242 7310 	movw	r3, #10000	; 0x2710
 8001a00:	9302      	str	r3, [sp, #8]
 8001a02:	2301      	movs	r3, #1
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	1cbb      	adds	r3, r7, #2
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f001 fb2e 	bl	800306c <HAL_I2C_Mem_Write>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <write_register8+0x40>
		return false;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <write_register8+0x42>
	else
		return true;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a32:	2b76      	cmp	r3, #118	; 0x76
 8001a34:	d005      	beq.n	8001a42 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a3a:	2b77      	cmp	r3, #119	; 0x77
 8001a3c:	d001      	beq.n	8001a42 <bmp280_init+0x1e>

		return false;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e099      	b.n	8001b76 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001a48:	2301      	movs	r3, #1
 8001a4a:	21d0      	movs	r1, #208	; 0xd0
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff feba 	bl	80017c6 <read_data>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <bmp280_init+0x38>
		return false;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e08c      	b.n	8001b76 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a62:	2b58      	cmp	r3, #88	; 0x58
 8001a64:	d006      	beq.n	8001a74 <bmp280_init+0x50>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a6c:	2b60      	cmp	r3, #96	; 0x60
 8001a6e:	d001      	beq.n	8001a74 <bmp280_init+0x50>

		return false;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e080      	b.n	8001b76 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001a74:	22b6      	movs	r2, #182	; 0xb6
 8001a76:	21e0      	movs	r1, #224	; 0xe0
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffae 	bl	80019da <write_register8>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <bmp280_init+0x64>
		return false;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e076      	b.n	8001b76 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001a88:	f107 020c 	add.w	r2, r7, #12
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	21f3      	movs	r1, #243	; 0xf3
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fe98 	bl	80017c6 <read_data>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f5      	bne.n	8001a88 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001a9c:	7b3b      	ldrb	r3, [r7, #12]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff feb5 	bl	8001816 <read_calibration_data>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f083 0301 	eor.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d100      	bne.n	8001aba <bmp280_init+0x96>
 8001ab8:	e001      	b.n	8001abe <bmp280_init+0x9a>
		return false;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e05b      	b.n	8001b76 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001ac4:	2b60      	cmp	r3, #96	; 0x60
 8001ac6:	d10a      	bne.n	8001ade <bmp280_init+0xba>
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff26 	bl	800191a <read_hum_calibration_data>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f083 0301 	eor.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <bmp280_init+0xba>
		return false;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e04b      	b.n	8001b76 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	795b      	ldrb	r3, [r3, #5]
 8001ae2:	015b      	lsls	r3, r3, #5
 8001ae4:	b25a      	sxtb	r2, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	4313      	orrs	r3, r2
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	461a      	mov	r2, r3
 8001af8:	21f5      	movs	r1, #245	; 0xf5
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ff6d 	bl	80019da <write_register8>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <bmp280_init+0xe6>
		return false;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e035      	b.n	8001b76 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d102      	bne.n	8001b18 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	78db      	ldrb	r3, [r3, #3]
 8001b1c:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	789b      	ldrb	r3, [r3, #2]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	b25b      	sxtb	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b25a      	sxtb	r2, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001b36:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001b3e:	2b60      	cmp	r3, #96	; 0x60
 8001b40:	d10d      	bne.n	8001b5e <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	791b      	ldrb	r3, [r3, #4]
 8001b46:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001b48:	7b7b      	ldrb	r3, [r7, #13]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	21f2      	movs	r1, #242	; 0xf2
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ff43 	bl	80019da <write_register8>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <bmp280_init+0x13a>
			return false;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e00b      	b.n	8001b76 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001b5e:	7bbb      	ldrb	r3, [r7, #14]
 8001b60:	461a      	mov	r2, r3
 8001b62:	21f4      	movs	r1, #244	; 0xf4
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff38 	bl	80019da <write_register8>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <bmp280_init+0x150>
		return false;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e000      	b.n	8001b76 <bmp280_init+0x152>
	}

	return true;
 8001b74:	2301      	movs	r3, #1
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001b7e:	b480      	push	{r7}
 8001b80:	b087      	sub	sp, #28
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	10da      	asrs	r2, r3, #3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001b9c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001ba0:	12db      	asrs	r3, r3, #11
 8001ba2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	111b      	asrs	r3, r3, #4
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	8812      	ldrh	r2, [r2, #0]
 8001bac:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	1112      	asrs	r2, r2, #4
 8001bb2:	68f9      	ldr	r1, [r7, #12]
 8001bb4:	8809      	ldrh	r1, [r1, #0]
 8001bb6:	1a52      	subs	r2, r2, r1
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001bc8:	139b      	asrs	r3, r3, #14
 8001bca:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	441a      	add	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	3380      	adds	r3, #128	; 0x80
 8001be2:	121b      	asrs	r3, r3, #8
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf4:	b09c      	sub	sp, #112	; 0x70
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6578      	str	r0, [r7, #84]	; 0x54
 8001bfa:	6539      	str	r1, [r7, #80]	; 0x50
 8001bfc:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c00:	461a      	mov	r2, r3
 8001c02:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c06:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8001c0a:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8001c0e:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001c12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c16:	fb03 f102 	mul.w	r1, r3, r2
 8001c1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c1e:	fb03 f302 	mul.w	r3, r3, r2
 8001c22:	18ca      	adds	r2, r1, r3
 8001c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c26:	fba3 4503 	umull	r4, r5, r3, r3
 8001c2a:	1953      	adds	r3, r2, r5
 8001c2c:	461d      	mov	r5, r3
 8001c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c30:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c3a:	fb02 f005 	mul.w	r0, r2, r5
 8001c3e:	fb04 f103 	mul.w	r1, r4, r3
 8001c42:	4401      	add	r1, r0
 8001c44:	fba4 2302 	umull	r2, r3, r4, r2
 8001c48:	4419      	add	r1, r3
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001c50:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c56:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001c60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001c62:	fb03 f001 	mul.w	r0, r3, r1
 8001c66:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001c68:	fb02 f101 	mul.w	r1, r2, r1
 8001c6c:	4408      	add	r0, r1
 8001c6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001c70:	fba1 2302 	umull	r2, r3, r1, r2
 8001c74:	18c1      	adds	r1, r0, r3
 8001c76:	460b      	mov	r3, r1
 8001c78:	f04f 0000 	mov.w	r0, #0
 8001c7c:	f04f 0100 	mov.w	r1, #0
 8001c80:	0459      	lsls	r1, r3, #17
 8001c82:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001c86:	0450      	lsls	r0, r2, #17
 8001c88:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c8c:	eb12 0800 	adds.w	r8, r2, r0
 8001c90:	eb43 0901 	adc.w	r9, r3, r1
 8001c94:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	00d1      	lsls	r1, r2, #3
 8001cae:	2000      	movs	r0, #0
 8001cb0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001cb4:	1814      	adds	r4, r2, r0
 8001cb6:	61bc      	str	r4, [r7, #24]
 8001cb8:	414b      	adcs	r3, r1
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001cc0:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001cc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001cc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cc8:	fb03 f102 	mul.w	r1, r3, r2
 8001ccc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd0:	fb03 f302 	mul.w	r3, r3, r2
 8001cd4:	18ca      	adds	r2, r1, r3
 8001cd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd8:	fba3 4503 	umull	r4, r5, r3, r3
 8001cdc:	1953      	adds	r3, r2, r5
 8001cde:	461d      	mov	r5, r3
 8001ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ce6:	b21a      	sxth	r2, r3
 8001ce8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001cec:	fb02 f005 	mul.w	r0, r2, r5
 8001cf0:	fb04 f103 	mul.w	r1, r4, r3
 8001cf4:	4401      	add	r1, r0
 8001cf6:	fba4 2302 	umull	r2, r3, r4, r2
 8001cfa:	4419      	add	r1, r3
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	f04f 0800 	mov.w	r8, #0
 8001d02:	f04f 0900 	mov.w	r9, #0
 8001d06:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8001d0a:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8001d0e:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001d1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d20:	fb03 f001 	mul.w	r0, r3, r1
 8001d24:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001d26:	fb02 f101 	mul.w	r1, r2, r1
 8001d2a:	1844      	adds	r4, r0, r1
 8001d2c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d2e:	fba1 0102 	umull	r0, r1, r1, r2
 8001d32:	1863      	adds	r3, r4, r1
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	030b      	lsls	r3, r1, #12
 8001d40:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001d44:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001d46:	eb18 0102 	adds.w	r1, r8, r2
 8001d4a:	6139      	str	r1, [r7, #16]
 8001d4c:	eb49 0303 	adc.w	r3, r9, r3
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d56:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001d5a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d5e:	1c11      	adds	r1, r2, #0
 8001d60:	6439      	str	r1, [r7, #64]	; 0x40
 8001d62:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001d66:	647b      	str	r3, [r7, #68]	; 0x44
 8001d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6a:	88db      	ldrh	r3, [r3, #6]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001d76:	4629      	mov	r1, r5
 8001d78:	fb02 f001 	mul.w	r0, r2, r1
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	fb01 f103 	mul.w	r1, r1, r3
 8001d82:	4401      	add	r1, r0
 8001d84:	4620      	mov	r0, r4
 8001d86:	fba0 2302 	umull	r2, r3, r0, r2
 8001d8a:	4419      	add	r1, r3
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	f04f 0000 	mov.w	r0, #0
 8001d92:	f04f 0100 	mov.w	r1, #0
 8001d96:	1058      	asrs	r0, r3, #1
 8001d98:	17d9      	asrs	r1, r3, #31
 8001d9a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 8001d9e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001da2:	4313      	orrs	r3, r2
 8001da4:	d101      	bne.n	8001daa <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8001da6:	2300      	movs	r3, #0
 8001da8:	e0e1      	b.n	8001f6e <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8001daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dac:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001db0:	461a      	mov	r2, r3
 8001db2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001db6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8001dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dbc:	105b      	asrs	r3, r3, #1
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc2:	07db      	lsls	r3, r3, #31
 8001dc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dc6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001dca:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001dce:	4621      	mov	r1, r4
 8001dd0:	ebb1 0a02 	subs.w	sl, r1, r2
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	eb61 0b03 	sbc.w	fp, r1, r3
 8001dda:	4652      	mov	r2, sl
 8001ddc:	465b      	mov	r3, fp
 8001dde:	1891      	adds	r1, r2, r2
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	415b      	adcs	r3, r3
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dea:	eb12 020a 	adds.w	r2, r2, sl
 8001dee:	eb43 030b 	adc.w	r3, r3, fp
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	0199      	lsls	r1, r3, #6
 8001dfc:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001e00:	0190      	lsls	r0, r2, #6
 8001e02:	1812      	adds	r2, r2, r0
 8001e04:	eb41 0303 	adc.w	r3, r1, r3
 8001e08:	f04f 0000 	mov.w	r0, #0
 8001e0c:	f04f 0100 	mov.w	r1, #0
 8001e10:	0099      	lsls	r1, r3, #2
 8001e12:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001e16:	0090      	lsls	r0, r2, #2
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	eb12 020a 	adds.w	r2, r2, sl
 8001e20:	eb43 030b 	adc.w	r3, r3, fp
 8001e24:	f04f 0000 	mov.w	r0, #0
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	0099      	lsls	r1, r3, #2
 8001e2e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001e32:	0090      	lsls	r0, r2, #2
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	eb12 010a 	adds.w	r1, r2, sl
 8001e3c:	6339      	str	r1, [r7, #48]	; 0x30
 8001e3e:	eb43 030b 	adc.w	r3, r3, fp
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
 8001e44:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001e48:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e4c:	f7ff faa4 	bl	8001398 <__aeabi_ldivmod>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e5e:	b218      	sxth	r0, r3
 8001e60:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001e64:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	0b62      	lsrs	r2, r4, #13
 8001e72:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001e76:	136b      	asrs	r3, r5, #13
 8001e78:	fb02 f501 	mul.w	r5, r2, r1
 8001e7c:	fb00 f403 	mul.w	r4, r0, r3
 8001e80:	442c      	add	r4, r5
 8001e82:	fba0 0102 	umull	r0, r1, r0, r2
 8001e86:	1863      	adds	r3, r4, r1
 8001e88:	4619      	mov	r1, r3
 8001e8a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	0b62      	lsrs	r2, r4, #13
 8001e98:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001e9c:	136b      	asrs	r3, r5, #13
 8001e9e:	fb02 f501 	mul.w	r5, r2, r1
 8001ea2:	fb00 f403 	mul.w	r4, r0, r3
 8001ea6:	442c      	add	r4, r5
 8001ea8:	fba0 0102 	umull	r0, r1, r0, r2
 8001eac:	1863      	adds	r3, r4, r1
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	0e42      	lsrs	r2, r0, #25
 8001eba:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001ebe:	164b      	asrs	r3, r1, #25
 8001ec0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001ed0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ed2:	fb03 f001 	mul.w	r0, r3, r1
 8001ed6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001ed8:	fb02 f101 	mul.w	r1, r2, r1
 8001edc:	1844      	adds	r4, r0, r1
 8001ede:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ee0:	fba1 0102 	umull	r0, r1, r1, r2
 8001ee4:	1863      	adds	r3, r4, r1
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	0cc2      	lsrs	r2, r0, #19
 8001ef2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001ef6:	14cb      	asrs	r3, r1, #19
 8001ef8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001efc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001f04:	1884      	adds	r4, r0, r2
 8001f06:	62bc      	str	r4, [r7, #40]	; 0x28
 8001f08:	eb41 0303 	adc.w	r3, r1, r3
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f0e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001f12:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001f16:	4621      	mov	r1, r4
 8001f18:	1889      	adds	r1, r1, r2
 8001f1a:	6239      	str	r1, [r7, #32]
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	eb43 0101 	adc.w	r1, r3, r1
 8001f22:	6279      	str	r1, [r7, #36]	; 0x24
 8001f24:	f04f 0000 	mov.w	r0, #0
 8001f28:	f04f 0100 	mov.w	r1, #0
 8001f2c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f30:	4623      	mov	r3, r4
 8001f32:	0a18      	lsrs	r0, r3, #8
 8001f34:	462b      	mov	r3, r5
 8001f36:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f3a:	462b      	mov	r3, r5
 8001f3c:	1219      	asrs	r1, r3, #8
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f40:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f44:	b21c      	sxth	r4, r3
 8001f46:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	012b      	lsls	r3, r5, #4
 8001f54:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001f58:	0122      	lsls	r2, r4, #4
 8001f5a:	1884      	adds	r4, r0, r2
 8001f5c:	603c      	str	r4, [r7, #0]
 8001f5e:	eb41 0303 	adc.w	r3, r1, r3
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f68:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8001f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3770      	adds	r7, #112	; 0x70
 8001f72:	46bd      	mov	sp, r7
 8001f74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001f78 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001f8a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	039a      	lsls	r2, r3, #14
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f96:	051b      	lsls	r3, r3, #20
 8001f98:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fb03 f301 	mul.w	r3, r3, r1
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001fae:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	fb02 f201 	mul.w	r2, r2, r1
 8001fbe:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001fc0:	68f9      	ldr	r1, [r7, #12]
 8001fc2:	7f09      	ldrb	r1, [r1, #28]
 8001fc4:	4608      	mov	r0, r1
 8001fc6:	6979      	ldr	r1, [r7, #20]
 8001fc8:	fb01 f100 	mul.w	r1, r1, r0
 8001fcc:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001fce:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001fd2:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001fd6:	1292      	asrs	r2, r2, #10
 8001fd8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001fe2:	fb01 f202 	mul.w	r2, r1, r2
 8001fe6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001fea:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	13db      	asrs	r3, r3, #15
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	13d2      	asrs	r2, r2, #15
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	7e12      	ldrb	r2, [r2, #24]
 8002004:	fb02 f303 	mul.w	r3, r2, r3
 8002008:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002016:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800201e:	bfa8      	it	ge
 8002020:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002024:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	131b      	asrs	r3, r3, #12
}
 800202a:	4618      	mov	r0, r3
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8002036:	b580      	push	{r7, lr}
 8002038:	b08c      	sub	sp, #48	; 0x30
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800204a:	2b60      	cmp	r3, #96	; 0x60
 800204c:	d007      	beq.n	800205e <bmp280_read_fixed+0x28>
		if (humidity)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <bmp280_read_fixed+0x24>
			*humidity = 0;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800205a:	2300      	movs	r3, #0
 800205c:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <bmp280_read_fixed+0x32>
 8002064:	2308      	movs	r3, #8
 8002066:	e000      	b.n	800206a <bmp280_read_fixed+0x34>
 8002068:	2306      	movs	r3, #6
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 800206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f107 0218 	add.w	r2, r7, #24
 8002074:	21f7      	movs	r1, #247	; 0xf7
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f7ff fba5 	bl	80017c6 <read_data>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <bmp280_read_fixed+0x50>
		return false;
 8002082:	2300      	movs	r3, #0
 8002084:	e038      	b.n	80020f8 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002086:	7e3b      	ldrb	r3, [r7, #24]
 8002088:	031a      	lsls	r2, r3, #12
 800208a:	7e7b      	ldrb	r3, [r7, #25]
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	4313      	orrs	r3, r2
 8002090:	7eba      	ldrb	r2, [r7, #26]
 8002092:	0912      	lsrs	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	4313      	orrs	r3, r2
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800209a:	7efb      	ldrb	r3, [r7, #27]
 800209c:	031a      	lsls	r2, r3, #12
 800209e:	7f3b      	ldrb	r3, [r7, #28]
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	4313      	orrs	r3, r2
 80020a4:	7f7a      	ldrb	r2, [r7, #29]
 80020a6:	0912      	lsrs	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	4313      	orrs	r3, r2
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	461a      	mov	r2, r3
 80020b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f7ff fd61 	bl	8001b7e <compensate_temperature>
 80020bc:	4602      	mov	r2, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	461a      	mov	r2, r3
 80020c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff fd91 	bl	8001bf0 <compensate_pressure>
 80020ce:	4602      	mov	r2, r0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00d      	beq.n	80020f6 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80020da:	7fbb      	ldrb	r3, [r7, #30]
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	7ffa      	ldrb	r2, [r7, #31]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	461a      	mov	r2, r3
 80020e8:	6a39      	ldr	r1, [r7, #32]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7ff ff44 	bl	8001f78 <compensate_humidity>
 80020f0:	4602      	mov	r2, r0
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	601a      	str	r2, [r3, #0]
	}

	return true;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3730      	adds	r7, #48	; 0x30
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <bmp280_read_float+0x1a>
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	e000      	b.n	800211c <bmp280_read_float+0x1c>
 800211a:	2300      	movs	r3, #0
 800211c:	f107 0218 	add.w	r2, r7, #24
 8002120:	f107 011c 	add.w	r1, r7, #28
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff ff86 	bl	8002036 <bmp280_read_fixed>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d028      	beq.n	8002182 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213a:	eddf 6a14 	vldr	s13, [pc, #80]	; 800218c <bmp280_read_float+0x8c>
 800213e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	ee07 3a90 	vmov	s15, r3
 800214e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002152:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002190 <bmp280_read_float+0x90>
 8002156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002170:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002194 <bmp280_read_float+0x94>
 8002174:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <bmp280_read_float+0x84>
	}

	return false;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	42c80000 	.word	0x42c80000
 8002190:	43800000 	.word	0x43800000
 8002194:	44800000 	.word	0x44800000

08002198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219e:	f107 0314 	add.w	r3, r7, #20
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
 80021ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ae:	4b2b      	ldr	r3, [pc, #172]	; (800225c <MX_GPIO_Init+0xc4>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	4a2a      	ldr	r2, [pc, #168]	; (800225c <MX_GPIO_Init+0xc4>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ba:	4b28      	ldr	r3, [pc, #160]	; (800225c <MX_GPIO_Init+0xc4>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021c6:	4b25      	ldr	r3, [pc, #148]	; (800225c <MX_GPIO_Init+0xc4>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	4a24      	ldr	r2, [pc, #144]	; (800225c <MX_GPIO_Init+0xc4>)
 80021cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d2:	4b22      	ldr	r3, [pc, #136]	; (800225c <MX_GPIO_Init+0xc4>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <MX_GPIO_Init+0xc4>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a1e      	ldr	r2, [pc, #120]	; (800225c <MX_GPIO_Init+0xc4>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b1c      	ldr	r3, [pc, #112]	; (800225c <MX_GPIO_Init+0xc4>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <MX_GPIO_Init+0xc4>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <MX_GPIO_Init+0xc4>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <MX_GPIO_Init+0xc4>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	2120      	movs	r1, #32
 8002212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002216:	f000 fe81 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800221a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800221e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002220:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	480b      	ldr	r0, [pc, #44]	; (8002260 <MX_GPIO_Init+0xc8>)
 8002232:	f000 fcc9 	bl	8002bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002236:	2320      	movs	r3, #32
 8002238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223a:	2301      	movs	r3, #1
 800223c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002250:	f000 fcba 	bl	8002bc8 <HAL_GPIO_Init>

}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	48000800 	.word	0x48000800

08002264 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <MX_I2C1_Init+0x74>)
 800226a:	4a1c      	ldr	r2, [pc, #112]	; (80022dc <MX_I2C1_Init+0x78>)
 800226c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <MX_I2C1_Init+0x74>)
 8002270:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <MX_I2C1_Init+0x7c>)
 8002272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <MX_I2C1_Init+0x74>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <MX_I2C1_Init+0x74>)
 800227c:	2201      	movs	r2, #1
 800227e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <MX_I2C1_Init+0x74>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <MX_I2C1_Init+0x74>)
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <MX_I2C1_Init+0x74>)
 800228e:	2200      	movs	r2, #0
 8002290:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <MX_I2C1_Init+0x74>)
 8002294:	2200      	movs	r2, #0
 8002296:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_I2C1_Init+0x74>)
 800229a:	2200      	movs	r2, #0
 800229c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800229e:	480e      	ldr	r0, [pc, #56]	; (80022d8 <MX_I2C1_Init+0x74>)
 80022a0:	f000 fe54 	bl	8002f4c <HAL_I2C_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80022aa:	f000 f9b6 	bl	800261a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022ae:	2100      	movs	r1, #0
 80022b0:	4809      	ldr	r0, [pc, #36]	; (80022d8 <MX_I2C1_Init+0x74>)
 80022b2:	f001 fbaf 	bl	8003a14 <HAL_I2CEx_ConfigAnalogFilter>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80022bc:	f000 f9ad 	bl	800261a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022c0:	2100      	movs	r1, #0
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <MX_I2C1_Init+0x74>)
 80022c4:	f001 fbf1 	bl	8003aaa <HAL_I2CEx_ConfigDigitalFilter>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80022ce:	f000 f9a4 	bl	800261a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000098 	.word	0x20000098
 80022dc:	40005400 	.word	0x40005400
 80022e0:	10909cec 	.word	0x10909cec

080022e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0ac      	sub	sp, #176	; 0xb0
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2288      	movs	r2, #136	; 0x88
 8002302:	2100      	movs	r1, #0
 8002304:	4618      	mov	r0, r3
 8002306:	f7fd ffb1 	bl	800026c <memset>
  if(i2cHandle->Instance==I2C1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a21      	ldr	r2, [pc, #132]	; (8002394 <HAL_I2C_MspInit+0xb0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d13b      	bne.n	800238c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002314:	2340      	movs	r3, #64	; 0x40
 8002316:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002318:	2300      	movs	r3, #0
 800231a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4618      	mov	r0, r3
 8002322:	f002 fa71 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800232c:	f000 f975 	bl	800261a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_I2C_MspInit+0xb4>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002334:	4a18      	ldr	r2, [pc, #96]	; (8002398 <HAL_I2C_MspInit+0xb4>)
 8002336:	f043 0302 	orr.w	r3, r3, #2
 800233a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800233c:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_I2C_MspInit+0xb4>)
 800233e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002348:	f44f 7340 	mov.w	r3, #768	; 0x300
 800234c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002350:	2312      	movs	r3, #18
 8002352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235c:	2303      	movs	r3, #3
 800235e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002362:	2304      	movs	r3, #4
 8002364:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800236c:	4619      	mov	r1, r3
 800236e:	480b      	ldr	r0, [pc, #44]	; (800239c <HAL_I2C_MspInit+0xb8>)
 8002370:	f000 fc2a 	bl	8002bc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_I2C_MspInit+0xb4>)
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_I2C_MspInit+0xb4>)
 800237a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800237e:	6593      	str	r3, [r2, #88]	; 0x58
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_I2C_MspInit+0xb4>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800238c:	bf00      	nop
 800238e:	37b0      	adds	r7, #176	; 0xb0
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40005400 	.word	0x40005400
 8002398:	40021000 	.word	0x40021000
 800239c:	48000400 	.word	0x48000400

080023a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a6:	f000 fa89 	bl	80028bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023aa:	f000 f8e5 	bl	8002578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ae:	f7ff fef3 	bl	8002198 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80023b2:	f000 f9cd 	bl	8002750 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80023b6:	f7ff ff55 	bl	8002264 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  bmp280_init_default_params(&bmp280.params);
 80023ba:	485e      	ldr	r0, [pc, #376]	; (8002534 <main+0x194>)
 80023bc:	f7ff f9b8 	bl	8001730 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 80023c0:	4b5d      	ldr	r3, [pc, #372]	; (8002538 <main+0x198>)
 80023c2:	2276      	movs	r2, #118	; 0x76
 80023c4:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 80023c6:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <main+0x198>)
 80023c8:	4a5c      	ldr	r2, [pc, #368]	; (800253c <main+0x19c>)
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)){
 80023cc:	e013      	b.n	80023f6 <main+0x56>
	  size = sprintf((char*)Data, "BMP280 Initialization failed\n");
 80023ce:	495c      	ldr	r1, [pc, #368]	; (8002540 <main+0x1a0>)
 80023d0:	485c      	ldr	r0, [pc, #368]	; (8002544 <main+0x1a4>)
 80023d2:	f7fd ffb9 	bl	8000348 <siprintf>
 80023d6:	4603      	mov	r3, r0
 80023d8:	b29a      	uxth	r2, r3
 80023da:	4b5b      	ldr	r3, [pc, #364]	; (8002548 <main+0x1a8>)
 80023dc:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, Data, size, 1000);
 80023de:	4b5a      	ldr	r3, [pc, #360]	; (8002548 <main+0x1a8>)
 80023e0:	881a      	ldrh	r2, [r3, #0]
 80023e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e6:	4957      	ldr	r1, [pc, #348]	; (8002544 <main+0x1a4>)
 80023e8:	4858      	ldr	r0, [pc, #352]	; (800254c <main+0x1ac>)
 80023ea:	f002 ff17 	bl	800521c <HAL_UART_Transmit>
	  HAL_Delay(2000);
 80023ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023f2:	f000 fadf 	bl	80029b4 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)){
 80023f6:	494f      	ldr	r1, [pc, #316]	; (8002534 <main+0x194>)
 80023f8:	484f      	ldr	r0, [pc, #316]	; (8002538 <main+0x198>)
 80023fa:	f7ff fb13 	bl	8001a24 <bmp280_init>
 80023fe:	4603      	mov	r3, r0
 8002400:	f083 0301 	eor.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1e1      	bne.n	80023ce <main+0x2e>

  }
  bool bme280p = bmp280.id == BME280_CHIP_ID;
 800240a:	4b4b      	ldr	r3, [pc, #300]	; (8002538 <main+0x198>)
 800240c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002410:	2b60      	cmp	r3, #96	; 0x60
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	71fb      	strb	r3, [r7, #7]
  size = sprintf((char*)Data, "BMP280: Found %s\n", bme280p ? "BME280" : "BMP280");
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <main+0x84>
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <main+0x1b0>)
 8002422:	e000      	b.n	8002426 <main+0x86>
 8002424:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <main+0x1b4>)
 8002426:	461a      	mov	r2, r3
 8002428:	494b      	ldr	r1, [pc, #300]	; (8002558 <main+0x1b8>)
 800242a:	4846      	ldr	r0, [pc, #280]	; (8002544 <main+0x1a4>)
 800242c:	f7fd ff8c 	bl	8000348 <siprintf>
 8002430:	4603      	mov	r3, r0
 8002432:	b29a      	uxth	r2, r3
 8002434:	4b44      	ldr	r3, [pc, #272]	; (8002548 <main+0x1a8>)
 8002436:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002438:	4b43      	ldr	r3, [pc, #268]	; (8002548 <main+0x1a8>)
 800243a:	881a      	ldrh	r2, [r3, #0]
 800243c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002440:	4940      	ldr	r1, [pc, #256]	; (8002544 <main+0x1a4>)
 8002442:	4842      	ldr	r0, [pc, #264]	; (800254c <main+0x1ac>)
 8002444:	f002 feea 	bl	800521c <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8002448:	2064      	movs	r0, #100	; 0x64
 800244a:	f000 fab3 	bl	80029b4 <HAL_Delay>
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)){
 800244e:	e013      	b.n	8002478 <main+0xd8>
		  size = sprintf((char*)Data,
 8002450:	4942      	ldr	r1, [pc, #264]	; (800255c <main+0x1bc>)
 8002452:	483c      	ldr	r0, [pc, #240]	; (8002544 <main+0x1a4>)
 8002454:	f7fd ff78 	bl	8000348 <siprintf>
 8002458:	4603      	mov	r3, r0
 800245a:	b29a      	uxth	r2, r3
 800245c:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <main+0x1a8>)
 800245e:	801a      	strh	r2, [r3, #0]
				  "Termperature/pressure reading failed\n");
		  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002460:	4b39      	ldr	r3, [pc, #228]	; (8002548 <main+0x1a8>)
 8002462:	881a      	ldrh	r2, [r3, #0]
 8002464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002468:	4936      	ldr	r1, [pc, #216]	; (8002544 <main+0x1a4>)
 800246a:	4838      	ldr	r0, [pc, #224]	; (800254c <main+0x1ac>)
 800246c:	f002 fed6 	bl	800521c <HAL_UART_Transmit>
		  HAL_Delay(2000);
 8002470:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002474:	f000 fa9e 	bl	80029b4 <HAL_Delay>
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)){
 8002478:	4b39      	ldr	r3, [pc, #228]	; (8002560 <main+0x1c0>)
 800247a:	4a3a      	ldr	r2, [pc, #232]	; (8002564 <main+0x1c4>)
 800247c:	493a      	ldr	r1, [pc, #232]	; (8002568 <main+0x1c8>)
 800247e:	482e      	ldr	r0, [pc, #184]	; (8002538 <main+0x198>)
 8002480:	f7ff fe3e 	bl	8002100 <bmp280_read_float>
 8002484:	4603      	mov	r3, r0
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1df      	bne.n	8002450 <main+0xb0>
	  }
	  size = sprintf((char*)Data, ", Pressure: %.2f Pa, Temperature: %.2f C,",
 8002490:	4b34      	ldr	r3, [pc, #208]	; (8002564 <main+0x1c4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe ff27 	bl	80012e8 <__aeabi_f2d>
 800249a:	4604      	mov	r4, r0
 800249c:	460d      	mov	r5, r1
 800249e:	4b32      	ldr	r3, [pc, #200]	; (8002568 <main+0x1c8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe ff20 	bl	80012e8 <__aeabi_f2d>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	e9cd 2300 	strd	r2, r3, [sp]
 80024b0:	4622      	mov	r2, r4
 80024b2:	462b      	mov	r3, r5
 80024b4:	492d      	ldr	r1, [pc, #180]	; (800256c <main+0x1cc>)
 80024b6:	4823      	ldr	r0, [pc, #140]	; (8002544 <main+0x1a4>)
 80024b8:	f7fd ff46 	bl	8000348 <siprintf>
 80024bc:	4603      	mov	r3, r0
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <main+0x1a8>)
 80024c2:	801a      	strh	r2, [r3, #0]
			  pressure, temperature);
	  HAL_UART_Transmit(&huart2, Data, size, 1000);
 80024c4:	4b20      	ldr	r3, [pc, #128]	; (8002548 <main+0x1a8>)
 80024c6:	881a      	ldrh	r2, [r3, #0]
 80024c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024cc:	491d      	ldr	r1, [pc, #116]	; (8002544 <main+0x1a4>)
 80024ce:	481f      	ldr	r0, [pc, #124]	; (800254c <main+0x1ac>)
 80024d0:	f002 fea4 	bl	800521c <HAL_UART_Transmit>
	  if (bme280p){
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d017      	beq.n	800250a <main+0x16a>
		  size = sprintf((char*)Data, ", Humidity: %.2f\n", humidity);
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <main+0x1c0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe ff02 	bl	80012e8 <__aeabi_f2d>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4921      	ldr	r1, [pc, #132]	; (8002570 <main+0x1d0>)
 80024ea:	4816      	ldr	r0, [pc, #88]	; (8002544 <main+0x1a4>)
 80024ec:	f7fd ff2c 	bl	8000348 <siprintf>
 80024f0:	4603      	mov	r3, r0
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	4b14      	ldr	r3, [pc, #80]	; (8002548 <main+0x1a8>)
 80024f6:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, Data, size, 1000);
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <main+0x1a8>)
 80024fa:	881a      	ldrh	r2, [r3, #0]
 80024fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002500:	4910      	ldr	r1, [pc, #64]	; (8002544 <main+0x1a4>)
 8002502:	4812      	ldr	r0, [pc, #72]	; (800254c <main+0x1ac>)
 8002504:	f002 fe8a 	bl	800521c <HAL_UART_Transmit>
 8002508:	e00f      	b.n	800252a <main+0x18a>
	  }

	  else{
		  size = sprintf((char*)Data, "\n");
 800250a:	491a      	ldr	r1, [pc, #104]	; (8002574 <main+0x1d4>)
 800250c:	480d      	ldr	r0, [pc, #52]	; (8002544 <main+0x1a4>)
 800250e:	f7fd ff1b 	bl	8000348 <siprintf>
 8002512:	4603      	mov	r3, r0
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <main+0x1a8>)
 8002518:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, Data, size, 1000);
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <main+0x1a8>)
 800251c:	881a      	ldrh	r2, [r3, #0]
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	4908      	ldr	r1, [pc, #32]	; (8002544 <main+0x1a4>)
 8002524:	4809      	ldr	r0, [pc, #36]	; (800254c <main+0x1ac>)
 8002526:	f002 fe79 	bl	800521c <HAL_UART_Transmit>

	  }
	  HAL_Delay(2000);
 800252a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800252e:	f000 fa41 	bl	80029b4 <HAL_Delay>
	  HAL_Delay(100);
 8002532:	e789      	b.n	8002448 <main+0xa8>
 8002534:	20000228 	.word	0x20000228
 8002538:	200001fc 	.word	0x200001fc
 800253c:	20000098 	.word	0x20000098
 8002540:	08005bd0 	.word	0x08005bd0
 8002544:	200000f8 	.word	0x200000f8
 8002548:	200001f8 	.word	0x200001f8
 800254c:	20000230 	.word	0x20000230
 8002550:	08005bf0 	.word	0x08005bf0
 8002554:	08005bf8 	.word	0x08005bf8
 8002558:	08005c00 	.word	0x08005c00
 800255c:	08005c14 	.word	0x08005c14
 8002560:	200000f4 	.word	0x200000f4
 8002564:	200000f0 	.word	0x200000f0
 8002568:	200000ec 	.word	0x200000ec
 800256c:	08005c3c 	.word	0x08005c3c
 8002570:	08005c68 	.word	0x08005c68
 8002574:	08005c7c 	.word	0x08005c7c

08002578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b096      	sub	sp, #88	; 0x58
 800257c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	2244      	movs	r2, #68	; 0x44
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd fe70 	bl	800026c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800258c:	463b      	mov	r3, r7
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
 8002598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800259a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800259e:	f001 fadf 	bl	8003b60 <HAL_PWREx_ControlVoltageScaling>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80025a8:	f000 f837 	bl	800261a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025ac:	2302      	movs	r3, #2
 80025ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025b6:	2310      	movs	r3, #16
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ba:	2302      	movs	r3, #2
 80025bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025be:	2302      	movs	r3, #2
 80025c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80025c2:	2301      	movs	r3, #1
 80025c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80025c6:	230a      	movs	r3, #10
 80025c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80025ca:	2307      	movs	r3, #7
 80025cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025ce:	2302      	movs	r3, #2
 80025d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025d2:	2302      	movs	r3, #2
 80025d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 fb16 	bl	8003c0c <HAL_RCC_OscConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80025e6:	f000 f818 	bl	800261a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025ea:	230f      	movs	r3, #15
 80025ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ee:	2303      	movs	r3, #3
 80025f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025fe:	463b      	mov	r3, r7
 8002600:	2104      	movs	r1, #4
 8002602:	4618      	mov	r0, r3
 8002604:	f001 fedc 	bl	80043c0 <HAL_RCC_ClockConfig>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800260e:	f000 f804 	bl	800261a <Error_Handler>
  }
}
 8002612:	bf00      	nop
 8002614:	3758      	adds	r7, #88	; 0x58
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800261e:	b672      	cpsid	i
}
 8002620:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002622:	e7fe      	b.n	8002622 <Error_Handler+0x8>

08002624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_MspInit+0x44>)
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <HAL_MspInit+0x44>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6613      	str	r3, [r2, #96]	; 0x60
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_MspInit+0x44>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_MspInit+0x44>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	4a08      	ldr	r2, [pc, #32]	; (8002668 <HAL_MspInit+0x44>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264c:	6593      	str	r3, [r2, #88]	; 0x58
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_MspInit+0x44>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002670:	e7fe      	b.n	8002670 <NMI_Handler+0x4>

08002672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002676:	e7fe      	b.n	8002676 <HardFault_Handler+0x4>

08002678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800267c:	e7fe      	b.n	800267c <MemManage_Handler+0x4>

0800267e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <BusFault_Handler+0x4>

08002684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <UsageFault_Handler+0x4>

0800268a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b8:	f000 f95c 	bl	8002974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <_sbrk+0x5c>)
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <_sbrk+0x60>)
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <_sbrk+0x64>)
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <_sbrk+0x68>)
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d207      	bcs.n	8002700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f0:	f7fd fd92 	bl	8000218 <__errno>
 80026f4:	4603      	mov	r3, r0
 80026f6:	220c      	movs	r2, #12
 80026f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026fe:	e009      	b.n	8002714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <_sbrk+0x64>)
 8002710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20018000 	.word	0x20018000
 8002720:	00000400 	.word	0x00000400
 8002724:	20000094 	.word	0x20000094
 8002728:	200002c0 	.word	0x200002c0

0800272c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <SystemInit+0x20>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <SystemInit+0x20>)
 8002738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800273c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002754:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002756:	4a15      	ldr	r2, [pc, #84]	; (80027ac <MX_USART2_UART_Init+0x5c>)
 8002758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 800275c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002776:	220c      	movs	r2, #12
 8002778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 800278e:	2200      	movs	r2, #0
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <MX_USART2_UART_Init+0x58>)
 8002794:	f002 fcf4 	bl	8005180 <HAL_UART_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800279e:	f7ff ff3c 	bl	800261a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000230 	.word	0x20000230
 80027ac:	40004400 	.word	0x40004400

080027b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0ac      	sub	sp, #176	; 0xb0
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	2288      	movs	r2, #136	; 0x88
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fd4b 	bl	800026c <memset>
  if(uartHandle->Instance==USART2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a21      	ldr	r2, [pc, #132]	; (8002860 <HAL_UART_MspInit+0xb0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d13b      	bne.n	8002858 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027e0:	2302      	movs	r3, #2
 80027e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027e4:	2300      	movs	r3, #0
 80027e6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 f80b 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027f8:	f7ff ff0f 	bl	800261a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_UART_MspInit+0xb4>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	4a18      	ldr	r2, [pc, #96]	; (8002864 <HAL_UART_MspInit+0xb4>)
 8002802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002806:	6593      	str	r3, [r2, #88]	; 0x58
 8002808:	4b16      	ldr	r3, [pc, #88]	; (8002864 <HAL_UART_MspInit+0xb4>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_UART_MspInit+0xb4>)
 8002816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002818:	4a12      	ldr	r2, [pc, #72]	; (8002864 <HAL_UART_MspInit+0xb4>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_UART_MspInit+0xb4>)
 8002822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800282c:	230c      	movs	r3, #12
 800282e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283e:	2303      	movs	r3, #3
 8002840:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002844:	2307      	movs	r3, #7
 8002846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800284e:	4619      	mov	r1, r3
 8002850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002854:	f000 f9b8 	bl	8002bc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002858:	bf00      	nop
 800285a:	37b0      	adds	r7, #176	; 0xb0
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40004400 	.word	0x40004400
 8002864:	40021000 	.word	0x40021000

08002868 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800286c:	f7ff ff5e 	bl	800272c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002870:	480c      	ldr	r0, [pc, #48]	; (80028a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002872:	490d      	ldr	r1, [pc, #52]	; (80028a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002874:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <LoopForever+0xe>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002878:	e002      	b.n	8002880 <LoopCopyDataInit>

0800287a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800287c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287e:	3304      	adds	r3, #4

08002880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002884:	d3f9      	bcc.n	800287a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002888:	4c0a      	ldr	r4, [pc, #40]	; (80028b4 <LoopForever+0x16>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800288c:	e001      	b.n	8002892 <LoopFillZerobss>

0800288e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002890:	3204      	adds	r2, #4

08002892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002894:	d3fb      	bcc.n	800288e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002896:	f7fd fcc5 	bl	8000224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800289a:	f7ff fd81 	bl	80023a0 <main>

0800289e <LoopForever>:

LoopForever:
    b LoopForever
 800289e:	e7fe      	b.n	800289e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80028ac:	08005d14 	.word	0x08005d14
  ldr r2, =_sbss
 80028b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80028b4:	200002bc 	.word	0x200002bc

080028b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028b8:	e7fe      	b.n	80028b8 <ADC1_2_IRQHandler>
	...

080028bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <HAL_Init+0x3c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <HAL_Init+0x3c>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d2:	2003      	movs	r0, #3
 80028d4:	f000 f944 	bl	8002b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028d8:	2000      	movs	r0, #0
 80028da:	f000 f80f 	bl	80028fc <HAL_InitTick>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	71fb      	strb	r3, [r7, #7]
 80028e8:	e001      	b.n	80028ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028ea:	f7ff fe9b 	bl	8002624 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028ee:	79fb      	ldrb	r3, [r7, #7]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40022000 	.word	0x40022000

080028fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <HAL_InitTick+0x6c>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d023      	beq.n	8002958 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_InitTick+0x70>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <HAL_InitTick+0x6c>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	4619      	mov	r1, r3
 800291a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f941 	bl	8002bae <HAL_SYSTICK_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10f      	bne.n	8002952 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d809      	bhi.n	800294c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002938:	2200      	movs	r2, #0
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002940:	f000 f919 	bl	8002b76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002944:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <HAL_InitTick+0x74>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e007      	b.n	800295c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	e004      	b.n	800295c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
 8002956:	e001      	b.n	800295c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800295c:	7bfb      	ldrb	r3, [r7, #15]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2000006c 	.word	0x2000006c
 800296c:	20000064 	.word	0x20000064
 8002970:	20000068 	.word	0x20000068

08002974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_IncTick+0x20>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_IncTick+0x24>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4413      	add	r3, r2
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_IncTick+0x24>)
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	2000006c 	.word	0x2000006c
 8002998:	200002b4 	.word	0x200002b4

0800299c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return uwTick;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_GetTick+0x14>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	200002b4 	.word	0x200002b4

080029b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff ffee 	bl	800299c <HAL_GetTick>
 80029c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029cc:	d005      	beq.n	80029da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_Delay+0x44>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029da:	bf00      	nop
 80029dc:	f7ff ffde 	bl	800299c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d8f7      	bhi.n	80029dc <HAL_Delay+0x28>
  {
  }
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	2000006c 	.word	0x2000006c

080029fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2e:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	60d3      	str	r3, [r2, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <__NVIC_GetPriorityGrouping+0x18>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f003 0307 	and.w	r3, r3, #7
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	db0a      	blt.n	8002a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	490c      	ldr	r1, [pc, #48]	; (8002aac <__NVIC_SetPriority+0x4c>)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a88:	e00a      	b.n	8002aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <__NVIC_SetPriority+0x50>)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3b04      	subs	r3, #4
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	761a      	strb	r2, [r3, #24]
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000e100 	.word	0xe000e100
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	; 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f1c3 0307 	rsb	r3, r3, #7
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	bf28      	it	cs
 8002ad2:	2304      	movcs	r3, #4
 8002ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d902      	bls.n	8002ae4 <NVIC_EncodePriority+0x30>
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	e000      	b.n	8002ae6 <NVIC_EncodePriority+0x32>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	401a      	ands	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b0c:	4313      	orrs	r3, r2
         );
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b2c:	d301      	bcc.n	8002b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00f      	b.n	8002b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <SysTick_Config+0x40>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b3a:	210f      	movs	r1, #15
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b40:	f7ff ff8e 	bl	8002a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <SysTick_Config+0x40>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <SysTick_Config+0x40>)
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	e000e010 	.word	0xe000e010

08002b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff47 	bl	80029fc <__NVIC_SetPriorityGrouping>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b88:	f7ff ff5c 	bl	8002a44 <__NVIC_GetPriorityGrouping>
 8002b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	6978      	ldr	r0, [r7, #20]
 8002b94:	f7ff ff8e 	bl	8002ab4 <NVIC_EncodePriority>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff5d 	bl	8002a60 <__NVIC_SetPriority>
}
 8002ba6:	bf00      	nop
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff ffb0 	bl	8002b1c <SysTick_Config>
 8002bbc:	4603      	mov	r3, r0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bd6:	e17f      	b.n	8002ed8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	2101      	movs	r1, #1
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	fa01 f303 	lsl.w	r3, r1, r3
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8171 	beq.w	8002ed2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d005      	beq.n	8002c08 <HAL_GPIO_Init+0x40>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d130      	bne.n	8002c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c3e:	2201      	movs	r2, #1
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	f003 0201 	and.w	r2, r3, #1
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d118      	bne.n	8002ca8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	f003 0201 	and.w	r2, r3, #1
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d017      	beq.n	8002ce4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d123      	bne.n	8002d38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	08da      	lsrs	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3208      	adds	r2, #8
 8002d32:	6939      	ldr	r1, [r7, #16]
 8002d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80ac 	beq.w	8002ed2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	4b5f      	ldr	r3, [pc, #380]	; (8002ef8 <HAL_GPIO_Init+0x330>)
 8002d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7e:	4a5e      	ldr	r2, [pc, #376]	; (8002ef8 <HAL_GPIO_Init+0x330>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6613      	str	r3, [r2, #96]	; 0x60
 8002d86:	4b5c      	ldr	r3, [pc, #368]	; (8002ef8 <HAL_GPIO_Init+0x330>)
 8002d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d92:	4a5a      	ldr	r2, [pc, #360]	; (8002efc <HAL_GPIO_Init+0x334>)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dbc:	d025      	beq.n	8002e0a <HAL_GPIO_Init+0x242>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4f      	ldr	r2, [pc, #316]	; (8002f00 <HAL_GPIO_Init+0x338>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01f      	beq.n	8002e06 <HAL_GPIO_Init+0x23e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4e      	ldr	r2, [pc, #312]	; (8002f04 <HAL_GPIO_Init+0x33c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d019      	beq.n	8002e02 <HAL_GPIO_Init+0x23a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4d      	ldr	r2, [pc, #308]	; (8002f08 <HAL_GPIO_Init+0x340>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0x236>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4c      	ldr	r2, [pc, #304]	; (8002f0c <HAL_GPIO_Init+0x344>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00d      	beq.n	8002dfa <HAL_GPIO_Init+0x232>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4b      	ldr	r2, [pc, #300]	; (8002f10 <HAL_GPIO_Init+0x348>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <HAL_GPIO_Init+0x22e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a4a      	ldr	r2, [pc, #296]	; (8002f14 <HAL_GPIO_Init+0x34c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_GPIO_Init+0x22a>
 8002dee:	2306      	movs	r3, #6
 8002df0:	e00c      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002df2:	2307      	movs	r3, #7
 8002df4:	e00a      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002df6:	2305      	movs	r3, #5
 8002df8:	e008      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	e006      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e004      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e002      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_GPIO_Init+0x244>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	f002 0203 	and.w	r2, r2, #3
 8002e12:	0092      	lsls	r2, r2, #2
 8002e14:	4093      	lsls	r3, r2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e1c:	4937      	ldr	r1, [pc, #220]	; (8002efc <HAL_GPIO_Init+0x334>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e2a:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e4e:	4a32      	ldr	r2, [pc, #200]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e54:	4b30      	ldr	r3, [pc, #192]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e78:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e7e:	4b26      	ldr	r3, [pc, #152]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ea2:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ecc:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <HAL_GPIO_Init+0x350>)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f47f ae78 	bne.w	8002bd8 <HAL_GPIO_Init+0x10>
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000
 8002f00:	48000400 	.word	0x48000400
 8002f04:	48000800 	.word	0x48000800
 8002f08:	48000c00 	.word	0x48000c00
 8002f0c:	48001000 	.word	0x48001000
 8002f10:	48001400 	.word	0x48001400
 8002f14:	48001800 	.word	0x48001800
 8002f18:	40010400 	.word	0x40010400

08002f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f2c:	787b      	ldrb	r3, [r7, #1]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f38:	e002      	b.n	8002f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e081      	b.n	8003062 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff f9b6 	bl	80022e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2224      	movs	r2, #36	; 0x24
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	e006      	b.n	8002fd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d104      	bne.n	8002fe6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fe4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003008:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69d9      	ldr	r1, [r3, #28]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1a      	ldr	r2, [r3, #32]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4603      	mov	r3, r0
 800307c:	817b      	strh	r3, [r7, #10]
 800307e:	460b      	mov	r3, r1
 8003080:	813b      	strh	r3, [r7, #8]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b20      	cmp	r3, #32
 8003090:	f040 80f9 	bne.w	8003286 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_I2C_Mem_Write+0x34>
 800309a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0ed      	b.n	8003288 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_I2C_Mem_Write+0x4e>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e0e6      	b.n	8003288 <HAL_I2C_Mem_Write+0x21c>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030c2:	f7ff fc6b 	bl	800299c <HAL_GetTick>
 80030c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2319      	movs	r3, #25
 80030ce:	2201      	movs	r2, #1
 80030d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fac3 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0d1      	b.n	8003288 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2221      	movs	r2, #33	; 0x21
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2240      	movs	r2, #64	; 0x40
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a3a      	ldr	r2, [r7, #32]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800310c:	88f8      	ldrh	r0, [r7, #6]
 800310e:	893a      	ldrh	r2, [r7, #8]
 8003110:	8979      	ldrh	r1, [r7, #10]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	9301      	str	r3, [sp, #4]
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	4603      	mov	r3, r0
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f9d3 	bl	80034c8 <I2C_RequestMemoryWrite>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0a9      	b.n	8003288 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2bff      	cmp	r3, #255	; 0xff
 800313c:	d90e      	bls.n	800315c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	22ff      	movs	r2, #255	; 0xff
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003148:	b2da      	uxtb	r2, r3
 800314a:	8979      	ldrh	r1, [r7, #10]
 800314c:	2300      	movs	r3, #0
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 fc2b 	bl	80039b0 <I2C_TransferConfig>
 800315a:	e00f      	b.n	800317c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	b2da      	uxtb	r2, r3
 800316c:	8979      	ldrh	r1, [r7, #10]
 800316e:	2300      	movs	r3, #0
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fc1a 	bl	80039b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 faad 	bl	80036e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e07b      	b.n	8003288 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	781a      	ldrb	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d034      	beq.n	8003234 <HAL_I2C_Mem_Write+0x1c8>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d130      	bne.n	8003234 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	2200      	movs	r2, #0
 80031da:	2180      	movs	r1, #128	; 0x80
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fa3f 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e04d      	b.n	8003288 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2bff      	cmp	r3, #255	; 0xff
 80031f4:	d90e      	bls.n	8003214 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	22ff      	movs	r2, #255	; 0xff
 80031fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003200:	b2da      	uxtb	r2, r3
 8003202:	8979      	ldrh	r1, [r7, #10]
 8003204:	2300      	movs	r3, #0
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fbcf 	bl	80039b0 <I2C_TransferConfig>
 8003212:	e00f      	b.n	8003234 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003222:	b2da      	uxtb	r2, r3
 8003224:	8979      	ldrh	r1, [r7, #10]
 8003226:	2300      	movs	r3, #0
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fbbe 	bl	80039b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d19e      	bne.n	800317c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fa8c 	bl	8003760 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e01a      	b.n	8003288 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2220      	movs	r2, #32
 8003258:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_I2C_Mem_Write+0x224>)
 8003266:	400b      	ands	r3, r1
 8003268:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003286:	2302      	movs	r3, #2
  }
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	fe00e800 	.word	0xfe00e800

08003294 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	817b      	strh	r3, [r7, #10]
 80032a6:	460b      	mov	r3, r1
 80032a8:	813b      	strh	r3, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	f040 80fd 	bne.w	80034b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_I2C_Mem_Read+0x34>
 80032c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0f1      	b.n	80034b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_I2C_Mem_Read+0x4e>
 80032de:	2302      	movs	r3, #2
 80032e0:	e0ea      	b.n	80034b8 <HAL_I2C_Mem_Read+0x224>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ea:	f7ff fb57 	bl	800299c <HAL_GetTick>
 80032ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2319      	movs	r3, #25
 80032f6:	2201      	movs	r2, #1
 80032f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f9af 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0d5      	b.n	80034b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2222      	movs	r2, #34	; 0x22
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2240      	movs	r2, #64	; 0x40
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a3a      	ldr	r2, [r7, #32]
 8003326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800332c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003334:	88f8      	ldrh	r0, [r7, #6]
 8003336:	893a      	ldrh	r2, [r7, #8]
 8003338:	8979      	ldrh	r1, [r7, #10]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	4603      	mov	r3, r0
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f913 	bl	8003570 <I2C_RequestMemoryRead>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0ad      	b.n	80034b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	2bff      	cmp	r3, #255	; 0xff
 8003364:	d90e      	bls.n	8003384 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	22ff      	movs	r2, #255	; 0xff
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	b2da      	uxtb	r2, r3
 8003372:	8979      	ldrh	r1, [r7, #10]
 8003374:	4b52      	ldr	r3, [pc, #328]	; (80034c0 <HAL_I2C_Mem_Read+0x22c>)
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fb17 	bl	80039b0 <I2C_TransferConfig>
 8003382:	e00f      	b.n	80033a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	b2da      	uxtb	r2, r3
 8003394:	8979      	ldrh	r1, [r7, #10]
 8003396:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_I2C_Mem_Read+0x22c>)
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fb06 	bl	80039b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	2200      	movs	r2, #0
 80033ac:	2104      	movs	r1, #4
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f956 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07c      	b.n	80034b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d034      	beq.n	8003464 <HAL_I2C_Mem_Read+0x1d0>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d130      	bne.n	8003464 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	2200      	movs	r2, #0
 800340a:	2180      	movs	r1, #128	; 0x80
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f927 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e04d      	b.n	80034b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	2bff      	cmp	r3, #255	; 0xff
 8003424:	d90e      	bls.n	8003444 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	22ff      	movs	r2, #255	; 0xff
 800342a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	b2da      	uxtb	r2, r3
 8003432:	8979      	ldrh	r1, [r7, #10]
 8003434:	2300      	movs	r3, #0
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fab7 	bl	80039b0 <I2C_TransferConfig>
 8003442:	e00f      	b.n	8003464 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	b2da      	uxtb	r2, r3
 8003454:	8979      	ldrh	r1, [r7, #10]
 8003456:	2300      	movs	r3, #0
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 faa6 	bl	80039b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d19a      	bne.n	80033a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f974 	bl	8003760 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e01a      	b.n	80034b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2220      	movs	r2, #32
 8003488:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_I2C_Mem_Read+0x230>)
 8003496:	400b      	ands	r3, r1
 8003498:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	80002400 	.word	0x80002400
 80034c4:	fe00e800 	.word	0xfe00e800

080034c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	4608      	mov	r0, r1
 80034d2:	4611      	mov	r1, r2
 80034d4:	461a      	mov	r2, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	817b      	strh	r3, [r7, #10]
 80034da:	460b      	mov	r3, r1
 80034dc:	813b      	strh	r3, [r7, #8]
 80034de:	4613      	mov	r3, r2
 80034e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	8979      	ldrh	r1, [r7, #10]
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <I2C_RequestMemoryWrite+0xa4>)
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fa5d 	bl	80039b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	69b9      	ldr	r1, [r7, #24]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f8f0 	bl	80036e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e02c      	b.n	8003564 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003510:	893b      	ldrh	r3, [r7, #8]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	629a      	str	r2, [r3, #40]	; 0x28
 800351a:	e015      	b.n	8003548 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800351c:	893b      	ldrh	r3, [r7, #8]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	b29b      	uxth	r3, r3
 8003522:	b2da      	uxtb	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	69b9      	ldr	r1, [r7, #24]
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f8d6 	bl	80036e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e012      	b.n	8003564 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800353e:	893b      	ldrh	r3, [r7, #8]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2200      	movs	r2, #0
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f884 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	80002000 	.word	0x80002000

08003570 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	4608      	mov	r0, r1
 800357a:	4611      	mov	r1, r2
 800357c:	461a      	mov	r2, r3
 800357e:	4603      	mov	r3, r0
 8003580:	817b      	strh	r3, [r7, #10]
 8003582:	460b      	mov	r3, r1
 8003584:	813b      	strh	r3, [r7, #8]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	8979      	ldrh	r1, [r7, #10]
 8003590:	4b20      	ldr	r3, [pc, #128]	; (8003614 <I2C_RequestMemoryRead+0xa4>)
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2300      	movs	r3, #0
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fa0a 	bl	80039b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	69b9      	ldr	r1, [r7, #24]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f89d 	bl	80036e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e02c      	b.n	800360a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d105      	bne.n	80035c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035b6:	893b      	ldrh	r3, [r7, #8]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
 80035c0:	e015      	b.n	80035ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035c2:	893b      	ldrh	r3, [r7, #8]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	69b9      	ldr	r1, [r7, #24]
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 f883 	bl	80036e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e012      	b.n	800360a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035e4:	893b      	ldrh	r3, [r7, #8]
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2200      	movs	r2, #0
 80035f6:	2140      	movs	r1, #64	; 0x40
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f831 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	80002000 	.word	0x80002000

08003618 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d103      	bne.n	8003636 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2200      	movs	r2, #0
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d007      	beq.n	8003654 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	619a      	str	r2, [r3, #24]
  }
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003670:	e022      	b.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003678:	d01e      	beq.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7ff f98f 	bl	800299c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d113      	bne.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e00f      	b.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d0cd      	beq.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036ec:	e02c      	b.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f870 	bl	80037d8 <I2C_IsErrorOccurred>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e02a      	b.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003708:	d01e      	beq.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7ff f947 	bl	800299c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d113      	bne.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	f043 0220 	orr.w	r2, r3, #32
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e007      	b.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d1cb      	bne.n	80036ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376c:	e028      	b.n	80037c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f830 	bl	80037d8 <I2C_IsErrorOccurred>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e026      	b.n	80037d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003782:	f7ff f90b 	bl	800299c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	429a      	cmp	r2, r3
 8003790:	d302      	bcc.n	8003798 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d113      	bne.n	80037c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d1cf      	bne.n	800376e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d075      	beq.n	80038f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2210      	movs	r2, #16
 800380a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800380c:	e056      	b.n	80038bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003814:	d052      	beq.n	80038bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003816:	f7ff f8c1 	bl	800299c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <I2C_IsErrorOccurred+0x54>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d147      	bne.n	80038bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003836:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800383e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800384a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384e:	d12e      	bne.n	80038ae <I2C_IsErrorOccurred+0xd6>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003856:	d02a      	beq.n	80038ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	2b20      	cmp	r3, #32
 800385c:	d027      	beq.n	80038ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800386c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800386e:	f7ff f895 	bl	800299c <HAL_GetTick>
 8003872:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003874:	e01b      	b.n	80038ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003876:	f7ff f891 	bl	800299c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b19      	cmp	r3, #25
 8003882:	d914      	bls.n	80038ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d1dc      	bne.n	8003876 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d003      	beq.n	80038d2 <I2C_IsErrorOccurred+0xfa>
 80038ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d09d      	beq.n	800380e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d103      	bne.n	80038e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2220      	movs	r2, #32
 80038e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	f043 0304 	orr.w	r3, r3, #4
 80038e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003912:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f043 0308 	orr.w	r3, r3, #8
 800392a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003934:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	f043 0302 	orr.w	r3, r3, #2
 800394c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003956:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800395e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01c      	beq.n	80039a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff fe56 	bl	8003618 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <I2C_IsErrorOccurred+0x1d4>)
 8003978:	400b      	ands	r3, r1
 800397a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80039a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3728      	adds	r7, #40	; 0x28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	fe00e800 	.word	0xfe00e800

080039b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	817b      	strh	r3, [r7, #10]
 80039be:	4613      	mov	r3, r2
 80039c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039c8:	7a7b      	ldrb	r3, [r7, #9]
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	4313      	orrs	r3, r2
 80039da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	0d5b      	lsrs	r3, r3, #21
 80039ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <I2C_TransferConfig+0x60>)
 80039f0:	430b      	orrs	r3, r1
 80039f2:	43db      	mvns	r3, r3
 80039f4:	ea02 0103 	and.w	r1, r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	03ff63ff 	.word	0x03ff63ff

08003a14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d138      	bne.n	8003a9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e032      	b.n	8003a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2224      	movs	r2, #36	; 0x24
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d139      	bne.n	8003b34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e033      	b.n	8003b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2224      	movs	r2, #36	; 0x24
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0201 	bic.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003afc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b48:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <HAL_PWREx_GetVoltageRange+0x18>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40007000 	.word	0x40007000

08003b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6e:	d130      	bne.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b70:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7c:	d038      	beq.n	8003bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b7e:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2232      	movs	r2, #50	; 0x32
 8003b94:	fb02 f303 	mul.w	r3, r2, r3
 8003b98:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0c9b      	lsrs	r3, r3, #18
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba4:	e002      	b.n	8003bac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb8:	d102      	bne.n	8003bc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f2      	bne.n	8003ba6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bcc:	d110      	bne.n	8003bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e00f      	b.n	8003bf2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bde:	d007      	beq.n	8003bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003be0:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003be8:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40007000 	.word	0x40007000
 8003c04:	20000064 	.word	0x20000064
 8003c08:	431bde83 	.word	0x431bde83

08003c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e3c6      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1e:	4ba1      	ldr	r3, [pc, #644]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c28:	4b9e      	ldr	r3, [pc, #632]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80e4 	beq.w	8003e08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <HAL_RCC_OscConfig+0x4a>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	f040 808b 	bne.w	8003d64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f040 8087 	bne.w	8003d64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c56:	4b93      	ldr	r3, [pc, #588]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_RCC_OscConfig+0x62>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e39e      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	4b8c      	ldr	r3, [pc, #560]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <HAL_RCC_OscConfig+0x7c>
 8003c7e:	4b89      	ldr	r3, [pc, #548]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c86:	e005      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
 8003c88:	4b86      	ldr	r3, [pc, #536]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d223      	bcs.n	8003ce0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fd53 	bl	8004748 <RCC_SetFlashLatencyFromMSIRange>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e37f      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cac:	4b7d      	ldr	r3, [pc, #500]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a7c      	ldr	r2, [pc, #496]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003cb2:	f043 0308 	orr.w	r3, r3, #8
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b7a      	ldr	r3, [pc, #488]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	4977      	ldr	r1, [pc, #476]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cca:	4b76      	ldr	r3, [pc, #472]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	4972      	ldr	r1, [pc, #456]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	604b      	str	r3, [r1, #4]
 8003cde:	e025      	b.n	8003d2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ce0:	4b70      	ldr	r3, [pc, #448]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a6f      	ldr	r2, [pc, #444]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003ce6:	f043 0308 	orr.w	r3, r3, #8
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b6d      	ldr	r3, [pc, #436]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	496a      	ldr	r1, [pc, #424]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cfe:	4b69      	ldr	r3, [pc, #420]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	4965      	ldr	r1, [pc, #404]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d109      	bne.n	8003d2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fd13 	bl	8004748 <RCC_SetFlashLatencyFromMSIRange>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e33f      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d2c:	f000 fc48 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8003d30:	4602      	mov	r2, r0
 8003d32:	4b5c      	ldr	r3, [pc, #368]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	495a      	ldr	r1, [pc, #360]	; (8003ea8 <HAL_RCC_OscConfig+0x29c>)
 8003d3e:	5ccb      	ldrb	r3, [r1, r3]
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
 8003d48:	4a58      	ldr	r2, [pc, #352]	; (8003eac <HAL_RCC_OscConfig+0x2a0>)
 8003d4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d4c:	4b58      	ldr	r3, [pc, #352]	; (8003eb0 <HAL_RCC_OscConfig+0x2a4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe fdd3 	bl	80028fc <HAL_InitTick>
 8003d56:	4603      	mov	r3, r0
 8003d58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d052      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	e323      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d032      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d6c:	4b4d      	ldr	r3, [pc, #308]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a4c      	ldr	r2, [pc, #304]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d78:	f7fe fe10 	bl	800299c <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d80:	f7fe fe0c 	bl	800299c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e30c      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d92:	4b44      	ldr	r3, [pc, #272]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d9e:	4b41      	ldr	r3, [pc, #260]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a40      	ldr	r2, [pc, #256]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003da4:	f043 0308 	orr.w	r3, r3, #8
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	493b      	ldr	r1, [pc, #236]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dbc:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	4936      	ldr	r1, [pc, #216]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
 8003dd0:	e01a      	b.n	8003e08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dd2:	4b34      	ldr	r3, [pc, #208]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a33      	ldr	r2, [pc, #204]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dde:	f7fe fddd 	bl	800299c <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003de6:	f7fe fdd9 	bl	800299c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e2d9      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003df8:	4b2a      	ldr	r3, [pc, #168]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x1da>
 8003e04:	e000      	b.n	8003e08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d074      	beq.n	8003efe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d005      	beq.n	8003e26 <HAL_RCC_OscConfig+0x21a>
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d10e      	bne.n	8003e3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d10b      	bne.n	8003e3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e26:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d064      	beq.n	8003efc <HAL_RCC_OscConfig+0x2f0>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d160      	bne.n	8003efc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e2b6      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x24a>
 8003e48:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a15      	ldr	r2, [pc, #84]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	e01d      	b.n	8003e92 <HAL_RCC_OscConfig+0x286>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCC_OscConfig+0x26e>
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003e66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0c      	ldr	r2, [pc, #48]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	e00b      	b.n	8003e92 <HAL_RCC_OscConfig+0x286>
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a09      	ldr	r2, [pc, #36]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a06      	ldr	r2, [pc, #24]	; (8003ea4 <HAL_RCC_OscConfig+0x298>)
 8003e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01c      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9a:	f7fe fd7f 	bl	800299c <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea0:	e011      	b.n	8003ec6 <HAL_RCC_OscConfig+0x2ba>
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	08005c80 	.word	0x08005c80
 8003eac:	20000064 	.word	0x20000064
 8003eb0:	20000068 	.word	0x20000068
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb4:	f7fe fd72 	bl	800299c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	; 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e272      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ec6:	4baf      	ldr	r3, [pc, #700]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x2a8>
 8003ed2:	e014      	b.n	8003efe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe fd62 	bl	800299c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fe fd5e 	bl	800299c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e25e      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eee:	4ba5      	ldr	r3, [pc, #660]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x2d0>
 8003efa:	e000      	b.n	8003efe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d060      	beq.n	8003fcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_OscConfig+0x310>
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b0c      	cmp	r3, #12
 8003f14:	d119      	bne.n	8003f4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d116      	bne.n	8003f4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f1c:	4b99      	ldr	r3, [pc, #612]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_OscConfig+0x328>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e23b      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f34:	4b93      	ldr	r3, [pc, #588]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	4990      	ldr	r1, [pc, #576]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f48:	e040      	b.n	8003fcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d023      	beq.n	8003f9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f52:	4b8c      	ldr	r3, [pc, #560]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a8b      	ldr	r2, [pc, #556]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fe fd1d 	bl	800299c <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f66:	f7fe fd19 	bl	800299c <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e219      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f78:	4b82      	ldr	r3, [pc, #520]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f84:	4b7f      	ldr	r3, [pc, #508]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	497c      	ldr	r1, [pc, #496]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
 8003f98:	e018      	b.n	8003fcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9a:	4b7a      	ldr	r3, [pc, #488]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a79      	ldr	r2, [pc, #484]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa6:	f7fe fcf9 	bl	800299c <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fae:	f7fe fcf5 	bl	800299c <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e1f5      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc0:	4b70      	ldr	r3, [pc, #448]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f0      	bne.n	8003fae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d03c      	beq.n	8004052 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01c      	beq.n	800401a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe0:	4b68      	ldr	r3, [pc, #416]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe6:	4a67      	ldr	r2, [pc, #412]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fe fcd4 	bl	800299c <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff8:	f7fe fcd0 	bl	800299c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e1d0      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800400a:	4b5e      	ldr	r3, [pc, #376]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 800400c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0ef      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x3ec>
 8004018:	e01b      	b.n	8004052 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800401a:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 800401c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004020:	4a58      	ldr	r2, [pc, #352]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402a:	f7fe fcb7 	bl	800299c <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004032:	f7fe fcb3 	bl	800299c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e1b3      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004044:	4b4f      	ldr	r3, [pc, #316]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1ef      	bne.n	8004032 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80a6 	beq.w	80041ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004060:	2300      	movs	r3, #0
 8004062:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004064:	4b47      	ldr	r3, [pc, #284]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10d      	bne.n	800408c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004070:	4b44      	ldr	r3, [pc, #272]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	4a43      	ldr	r2, [pc, #268]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407a:	6593      	str	r3, [r2, #88]	; 0x58
 800407c:	4b41      	ldr	r3, [pc, #260]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004088:	2301      	movs	r3, #1
 800408a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800408c:	4b3e      	ldr	r3, [pc, #248]	; (8004188 <HAL_RCC_OscConfig+0x57c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d118      	bne.n	80040ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004098:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <HAL_RCC_OscConfig+0x57c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a3a      	ldr	r2, [pc, #232]	; (8004188 <HAL_RCC_OscConfig+0x57c>)
 800409e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a4:	f7fe fc7a 	bl	800299c <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ac:	f7fe fc76 	bl	800299c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e176      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040be:	4b32      	ldr	r3, [pc, #200]	; (8004188 <HAL_RCC_OscConfig+0x57c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d108      	bne.n	80040e4 <HAL_RCC_OscConfig+0x4d8>
 80040d2:	4b2c      	ldr	r3, [pc, #176]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	4a2a      	ldr	r2, [pc, #168]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040e2:	e024      	b.n	800412e <HAL_RCC_OscConfig+0x522>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d110      	bne.n	800410e <HAL_RCC_OscConfig+0x502>
 80040ec:	4b25      	ldr	r3, [pc, #148]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	4a24      	ldr	r2, [pc, #144]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040fc:	4b21      	ldr	r3, [pc, #132]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	4a20      	ldr	r2, [pc, #128]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800410c:	e00f      	b.n	800412e <HAL_RCC_OscConfig+0x522>
 800410e:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004114:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800411e:	4b19      	ldr	r3, [pc, #100]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004124:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004126:	f023 0304 	bic.w	r3, r3, #4
 800412a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d016      	beq.n	8004164 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004136:	f7fe fc31 	bl	800299c <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413c:	e00a      	b.n	8004154 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f7fe fc2d 	bl	800299c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f241 3288 	movw	r2, #5000	; 0x1388
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e12b      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ed      	beq.n	800413e <HAL_RCC_OscConfig+0x532>
 8004162:	e01a      	b.n	800419a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fe fc1a 	bl	800299c <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800416a:	e00f      	b.n	800418c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fe fc16 	bl	800299c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d906      	bls.n	800418c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e114      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800418c:	4b89      	ldr	r3, [pc, #548]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e8      	bne.n	800416c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800419a:	7ffb      	ldrb	r3, [r7, #31]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d105      	bne.n	80041ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a0:	4b84      	ldr	r3, [pc, #528]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 80041a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a4:	4a83      	ldr	r2, [pc, #524]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 80041a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80fa 	beq.w	80043aa <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	f040 80d0 	bne.w	8004360 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041c0:	4b7c      	ldr	r3, [pc, #496]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 0203 	and.w	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d130      	bne.n	8004236 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	3b01      	subs	r3, #1
 80041e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d127      	bne.n	8004236 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d11f      	bne.n	8004236 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004200:	2a07      	cmp	r2, #7
 8004202:	bf14      	ite	ne
 8004204:	2201      	movne	r2, #1
 8004206:	2200      	moveq	r2, #0
 8004208:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800420a:	4293      	cmp	r3, r2
 800420c:	d113      	bne.n	8004236 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	085b      	lsrs	r3, r3, #1
 800421a:	3b01      	subs	r3, #1
 800421c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d109      	bne.n	8004236 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	3b01      	subs	r3, #1
 8004230:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004232:	429a      	cmp	r2, r3
 8004234:	d06e      	beq.n	8004314 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b0c      	cmp	r3, #12
 800423a:	d069      	beq.n	8004310 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800423c:	4b5d      	ldr	r3, [pc, #372]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d105      	bne.n	8004254 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004248:	4b5a      	ldr	r3, [pc, #360]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0a9      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004258:	4b56      	ldr	r3, [pc, #344]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a55      	ldr	r2, [pc, #340]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 800425e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004262:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004264:	f7fe fb9a 	bl	800299c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426c:	f7fe fb96 	bl	800299c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e096      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800427e:	4b4d      	ldr	r3, [pc, #308]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428a:	4b4a      	ldr	r3, [pc, #296]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	4b4a      	ldr	r3, [pc, #296]	; (80043b8 <HAL_RCC_OscConfig+0x7ac>)
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800429a:	3a01      	subs	r2, #1
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042a4:	0212      	lsls	r2, r2, #8
 80042a6:	4311      	orrs	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042ac:	0852      	lsrs	r2, r2, #1
 80042ae:	3a01      	subs	r2, #1
 80042b0:	0552      	lsls	r2, r2, #21
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042b8:	0852      	lsrs	r2, r2, #1
 80042ba:	3a01      	subs	r2, #1
 80042bc:	0652      	lsls	r2, r2, #25
 80042be:	4311      	orrs	r1, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042c4:	0912      	lsrs	r2, r2, #4
 80042c6:	0452      	lsls	r2, r2, #17
 80042c8:	430a      	orrs	r2, r1
 80042ca:	493a      	ldr	r1, [pc, #232]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042d0:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a37      	ldr	r2, [pc, #220]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 80042d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042dc:	4b35      	ldr	r3, [pc, #212]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a34      	ldr	r2, [pc, #208]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 80042e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e8:	f7fe fb58 	bl	800299c <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fe fb54 	bl	800299c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e054      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004302:	4b2c      	ldr	r3, [pc, #176]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800430e:	e04c      	b.n	80043aa <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e04b      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004314:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d144      	bne.n	80043aa <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004320:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a23      	ldr	r2, [pc, #140]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800432c:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 8004332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004336:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004338:	f7fe fb30 	bl	800299c <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004340:	f7fe fb2c 	bl	800299c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e02c      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004352:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0x734>
 800435e:	e024      	b.n	80043aa <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d01f      	beq.n	80043a6 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004366:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 800436c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fe fb13 	bl	800299c <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437a:	f7fe fb0f 	bl	800299c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e00f      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f0      	bne.n	800437a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	4905      	ldr	r1, [pc, #20]	; (80043b4 <HAL_RCC_OscConfig+0x7a8>)
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <HAL_RCC_OscConfig+0x7b0>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	60cb      	str	r3, [r1, #12]
 80043a4:	e001      	b.n	80043aa <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3720      	adds	r7, #32
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40021000 	.word	0x40021000
 80043b8:	f99d808c 	.word	0xf99d808c
 80043bc:	feeefffc 	.word	0xfeeefffc

080043c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0e7      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043d4:	4b75      	ldr	r3, [pc, #468]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d910      	bls.n	8004404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e2:	4b72      	ldr	r3, [pc, #456]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 0207 	bic.w	r2, r3, #7
 80043ea:	4970      	ldr	r1, [pc, #448]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f2:	4b6e      	ldr	r3, [pc, #440]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d001      	beq.n	8004404 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0cf      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d010      	beq.n	8004432 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	4b66      	ldr	r3, [pc, #408]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441c:	429a      	cmp	r2, r3
 800441e:	d908      	bls.n	8004432 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004420:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	4960      	ldr	r1, [pc, #384]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 800442e:	4313      	orrs	r3, r2
 8004430:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d04c      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b03      	cmp	r3, #3
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004446:	4b5a      	ldr	r3, [pc, #360]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d121      	bne.n	8004496 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0a6      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800445e:	4b54      	ldr	r3, [pc, #336]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d115      	bne.n	8004496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e09a      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004476:	4b4e      	ldr	r3, [pc, #312]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e08e      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004486:	4b4a      	ldr	r3, [pc, #296]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e086      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004496:	4b46      	ldr	r3, [pc, #280]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4943      	ldr	r1, [pc, #268]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a8:	f7fe fa78 	bl	800299c <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b0:	f7fe fa74 	bl	800299c <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e06e      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	4b3a      	ldr	r3, [pc, #232]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 020c 	and.w	r2, r3, #12
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1eb      	bne.n	80044b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d208      	bcs.n	8004506 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f4:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	492b      	ldr	r1, [pc, #172]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004506:	4b29      	ldr	r3, [pc, #164]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d210      	bcs.n	8004536 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f023 0207 	bic.w	r2, r3, #7
 800451c:	4923      	ldr	r1, [pc, #140]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d001      	beq.n	8004536 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e036      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004542:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	4918      	ldr	r1, [pc, #96]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004560:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4910      	ldr	r1, [pc, #64]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004574:	f000 f824 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	490b      	ldr	r1, [pc, #44]	; (80045b4 <HAL_RCC_ClockConfig+0x1f4>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004592:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1fc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe f9af 	bl	80028fc <HAL_InitTick>
 800459e:	4603      	mov	r3, r0
 80045a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80045a2:	7afb      	ldrb	r3, [r7, #11]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40022000 	.word	0x40022000
 80045b0:	40021000 	.word	0x40021000
 80045b4:	08005c80 	.word	0x08005c80
 80045b8:	20000064 	.word	0x20000064
 80045bc:	20000068 	.word	0x20000068

080045c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b089      	sub	sp, #36	; 0x24
 80045c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	2300      	movs	r3, #0
 80045cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ce:	4b3e      	ldr	r3, [pc, #248]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045d8:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0x34>
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	d121      	bne.n	8004632 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d11e      	bne.n	8004632 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045f4:	4b34      	ldr	r3, [pc, #208]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004600:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	e005      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004610:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800461c:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004624:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10d      	bne.n	8004648 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004630:	e00a      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b04      	cmp	r3, #4
 8004636:	d102      	bne.n	800463e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004638:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	e004      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d101      	bne.n	8004648 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004644:	4b23      	ldr	r3, [pc, #140]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004646:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d134      	bne.n	80046b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800464e:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d003      	beq.n	8004666 <HAL_RCC_GetSysClockFreq+0xa6>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d003      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0xac>
 8004664:	e005      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004668:	617b      	str	r3, [r7, #20]
      break;
 800466a:	e005      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800466e:	617b      	str	r3, [r7, #20]
      break;
 8004670:	e002      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	617b      	str	r3, [r7, #20]
      break;
 8004676:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004678:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	3301      	adds	r3, #1
 8004684:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004686:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	fb02 f203 	mul.w	r2, r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	0e5b      	lsrs	r3, r3, #25
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	3301      	adds	r3, #1
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046b8:	69bb      	ldr	r3, [r7, #24]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3724      	adds	r7, #36	; 0x24
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40021000 	.word	0x40021000
 80046cc:	08005c98 	.word	0x08005c98
 80046d0:	00f42400 	.word	0x00f42400
 80046d4:	007a1200 	.word	0x007a1200

080046d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_RCC_GetHCLKFreq+0x14>)
 80046de:	681b      	ldr	r3, [r3, #0]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000064 	.word	0x20000064

080046f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046f4:	f7ff fff0 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4904      	ldr	r1, [pc, #16]	; (8004718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000
 8004718:	08005c90 	.word	0x08005c90

0800471c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004720:	f7ff ffda 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0adb      	lsrs	r3, r3, #11
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4904      	ldr	r1, [pc, #16]	; (8004744 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40021000 	.word	0x40021000
 8004744:	08005c90 	.word	0x08005c90

08004748 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004754:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004760:	f7ff f9f0 	bl	8003b44 <HAL_PWREx_GetVoltageRange>
 8004764:	6178      	str	r0, [r7, #20]
 8004766:	e014      	b.n	8004792 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476c:	4a24      	ldr	r2, [pc, #144]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800476e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004772:	6593      	str	r3, [r2, #88]	; 0x58
 8004774:	4b22      	ldr	r3, [pc, #136]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004780:	f7ff f9e0 	bl	8003b44 <HAL_PWREx_GetVoltageRange>
 8004784:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004786:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	4a1d      	ldr	r2, [pc, #116]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800478c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004790:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004798:	d10b      	bne.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d919      	bls.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2ba0      	cmp	r3, #160	; 0xa0
 80047a4:	d902      	bls.n	80047ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047a6:	2302      	movs	r3, #2
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	e013      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047ac:	2301      	movs	r3, #1
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	e010      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b80      	cmp	r3, #128	; 0x80
 80047b6:	d902      	bls.n	80047be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047b8:	2303      	movs	r3, #3
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	e00a      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b80      	cmp	r3, #128	; 0x80
 80047c2:	d102      	bne.n	80047ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047c4:	2302      	movs	r3, #2
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	e004      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b70      	cmp	r3, #112	; 0x70
 80047ce:	d101      	bne.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047d0:	2301      	movs	r3, #1
 80047d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f023 0207 	bic.w	r2, r3, #7
 80047dc:	4909      	ldr	r1, [pc, #36]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d001      	beq.n	80047f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000
 8004804:	40022000 	.word	0x40022000

08004808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004810:	2300      	movs	r3, #0
 8004812:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004814:	2300      	movs	r3, #0
 8004816:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004820:	2b00      	cmp	r3, #0
 8004822:	d041      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004828:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800482c:	d02a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800482e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004832:	d824      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004838:	d008      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800483a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800483e:	d81e      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004848:	d010      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800484a:	e018      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800484c:	4b86      	ldr	r3, [pc, #536]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a85      	ldr	r2, [pc, #532]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004856:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004858:	e015      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fabb 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800486a:	e00c      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3320      	adds	r3, #32
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fba6 	bl	8004fc4 <RCCEx_PLLSAI2_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800487c:	e003      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	74fb      	strb	r3, [r7, #19]
      break;
 8004882:	e000      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004886:	7cfb      	ldrb	r3, [r7, #19]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10b      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800488c:	4b76      	ldr	r3, [pc, #472]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800489a:	4973      	ldr	r1, [pc, #460]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048a2:	e001      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a4:	7cfb      	ldrb	r3, [r7, #19]
 80048a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d041      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048bc:	d02a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80048be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048c2:	d824      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c8:	d008      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048ce:	d81e      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048d8:	d010      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048da:	e018      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048dc:	4b62      	ldr	r3, [pc, #392]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a61      	ldr	r2, [pc, #388]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048e8:	e015      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3304      	adds	r3, #4
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fa73 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048fa:	e00c      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3320      	adds	r3, #32
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fb5e 	bl	8004fc4 <RCCEx_PLLSAI2_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800490c:	e003      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	74fb      	strb	r3, [r7, #19]
      break;
 8004912:	e000      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004916:	7cfb      	ldrb	r3, [r7, #19]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800491c:	4b52      	ldr	r3, [pc, #328]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800492a:	494f      	ldr	r1, [pc, #316]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004932:	e001      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	7cfb      	ldrb	r3, [r7, #19]
 8004936:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80a0 	beq.w	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800494a:	4b47      	ldr	r3, [pc, #284]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00d      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004960:	4b41      	ldr	r3, [pc, #260]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	4a40      	ldr	r2, [pc, #256]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496a:	6593      	str	r3, [r2, #88]	; 0x58
 800496c:	4b3e      	ldr	r3, [pc, #248]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004978:	2301      	movs	r3, #1
 800497a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800497c:	4b3b      	ldr	r3, [pc, #236]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3a      	ldr	r2, [pc, #232]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004986:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004988:	f7fe f808 	bl	800299c <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800498e:	e009      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004990:	f7fe f804 	bl	800299c <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d902      	bls.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	74fb      	strb	r3, [r7, #19]
        break;
 80049a2:	e005      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049a4:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0ef      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80049b0:	7cfb      	ldrb	r3, [r7, #19]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d15c      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049b6:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01f      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d019      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049d4:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049e0:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d016      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fd ffc3 	bl	800299c <HAL_GetTick>
 8004a16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a18:	e00b      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1a:	f7fd ffbf 	bl	800299c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d902      	bls.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a30:	e006      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a32:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0ec      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a56:	4904      	ldr	r1, [pc, #16]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a5e:	e009      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	74bb      	strb	r3, [r7, #18]
 8004a64:	e006      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a74:	7c7b      	ldrb	r3, [r7, #17]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d105      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7a:	4b9e      	ldr	r3, [pc, #632]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	4a9d      	ldr	r2, [pc, #628]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a92:	4b98      	ldr	r3, [pc, #608]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	f023 0203 	bic.w	r2, r3, #3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	4994      	ldr	r1, [pc, #592]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ab4:	4b8f      	ldr	r3, [pc, #572]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 020c 	bic.w	r2, r3, #12
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	498c      	ldr	r1, [pc, #560]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ad6:	4b87      	ldr	r3, [pc, #540]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	4983      	ldr	r1, [pc, #524]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004af8:	4b7e      	ldr	r3, [pc, #504]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	497b      	ldr	r1, [pc, #492]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b1a:	4b76      	ldr	r3, [pc, #472]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b28:	4972      	ldr	r1, [pc, #456]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b3c:	4b6d      	ldr	r3, [pc, #436]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	496a      	ldr	r1, [pc, #424]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b5e:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6c:	4961      	ldr	r1, [pc, #388]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b80:	4b5c      	ldr	r3, [pc, #368]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8e:	4959      	ldr	r1, [pc, #356]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ba2:	4b54      	ldr	r3, [pc, #336]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	4950      	ldr	r1, [pc, #320]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	4948      	ldr	r1, [pc, #288]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004be6:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf4:	493f      	ldr	r1, [pc, #252]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d028      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c08:	4b3a      	ldr	r3, [pc, #232]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c16:	4937      	ldr	r1, [pc, #220]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c26:	d106      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c28:	4b32      	ldr	r3, [pc, #200]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	4a31      	ldr	r2, [pc, #196]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c32:	60d3      	str	r3, [r2, #12]
 8004c34:	e011      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c3e:	d10c      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	2101      	movs	r1, #1
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f8c8 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d028      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c66:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	491f      	ldr	r1, [pc, #124]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c84:	d106      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c86:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	4a1a      	ldr	r2, [pc, #104]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c90:	60d3      	str	r3, [r2, #12]
 8004c92:	e011      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 f899 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004caa:	4603      	mov	r3, r0
 8004cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02b      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd2:	4908      	ldr	r1, [pc, #32]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce2:	d109      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4a02      	ldr	r2, [pc, #8]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cee:	60d3      	str	r3, [r2, #12]
 8004cf0:	e014      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3304      	adds	r3, #4
 8004d06:	2101      	movs	r1, #1
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 f867 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d12:	7cfb      	ldrb	r3, [r7, #19]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d18:	7cfb      	ldrb	r3, [r7, #19]
 8004d1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02f      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d28:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d36:	4928      	ldr	r1, [pc, #160]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d46:	d10d      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f844 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d014      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d5e:	7cfb      	ldrb	r3, [r7, #19]
 8004d60:	74bb      	strb	r3, [r7, #18]
 8004d62:	e011      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6c:	d10c      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3320      	adds	r3, #32
 8004d72:	2102      	movs	r1, #2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f925 	bl	8004fc4 <RCCEx_PLLSAI2_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d7e:	7cfb      	ldrb	r3, [r7, #19]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d94:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da2:	490d      	ldr	r1, [pc, #52]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004db6:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc6:	4904      	ldr	r1, [pc, #16]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dce:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000

08004ddc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dea:	4b75      	ldr	r3, [pc, #468]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004df6:	4b72      	ldr	r3, [pc, #456]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f003 0203 	and.w	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d10d      	bne.n	8004e22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
       ||
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e0e:	4b6c      	ldr	r3, [pc, #432]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d047      	beq.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	e044      	b.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d018      	beq.n	8004e62 <RCCEx_PLLSAI1_Config+0x86>
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d825      	bhi.n	8004e80 <RCCEx_PLLSAI1_Config+0xa4>
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d002      	beq.n	8004e3e <RCCEx_PLLSAI1_Config+0x62>
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d009      	beq.n	8004e50 <RCCEx_PLLSAI1_Config+0x74>
 8004e3c:	e020      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e3e:	4b60      	ldr	r3, [pc, #384]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11d      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4e:	e01a      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e50:	4b5b      	ldr	r3, [pc, #364]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d116      	bne.n	8004e8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e60:	e013      	b.n	8004e8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e62:	4b57      	ldr	r3, [pc, #348]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e6e:	4b54      	ldr	r3, [pc, #336]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e7e:	e006      	b.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      break;
 8004e84:	e004      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e86:	bf00      	nop
 8004e88:	e002      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e000      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e96:	4b4a      	ldr	r3, [pc, #296]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	4944      	ldr	r1, [pc, #272]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d17d      	bne.n	8004fb4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004eb8:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a40      	ldr	r2, [pc, #256]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ebe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fd fd6a 	bl	800299c <HAL_GetTick>
 8004ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eca:	e009      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ecc:	f7fd fd66 	bl	800299c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d902      	bls.n	8004ee0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ede:	e005      	b.n	8004eec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ee0:	4b37      	ldr	r3, [pc, #220]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1ef      	bne.n	8004ecc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d160      	bne.n	8004fb4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d111      	bne.n	8004f1c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ef8:	4b31      	ldr	r3, [pc, #196]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6892      	ldr	r2, [r2, #8]
 8004f08:	0211      	lsls	r1, r2, #8
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68d2      	ldr	r2, [r2, #12]
 8004f0e:	0912      	lsrs	r2, r2, #4
 8004f10:	0452      	lsls	r2, r2, #17
 8004f12:	430a      	orrs	r2, r1
 8004f14:	492a      	ldr	r1, [pc, #168]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	610b      	str	r3, [r1, #16]
 8004f1a:	e027      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d112      	bne.n	8004f48 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f22:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6892      	ldr	r2, [r2, #8]
 8004f32:	0211      	lsls	r1, r2, #8
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6912      	ldr	r2, [r2, #16]
 8004f38:	0852      	lsrs	r2, r2, #1
 8004f3a:	3a01      	subs	r2, #1
 8004f3c:	0552      	lsls	r2, r2, #21
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	491f      	ldr	r1, [pc, #124]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	610b      	str	r3, [r1, #16]
 8004f46:	e011      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6892      	ldr	r2, [r2, #8]
 8004f58:	0211      	lsls	r1, r2, #8
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6952      	ldr	r2, [r2, #20]
 8004f5e:	0852      	lsrs	r2, r2, #1
 8004f60:	3a01      	subs	r2, #1
 8004f62:	0652      	lsls	r2, r2, #25
 8004f64:	430a      	orrs	r2, r1
 8004f66:	4916      	ldr	r1, [pc, #88]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f6c:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fd fd10 	bl	800299c <HAL_GetTick>
 8004f7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f7e:	e009      	b.n	8004f94 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f80:	f7fd fd0c 	bl	800299c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d902      	bls.n	8004f94 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	73fb      	strb	r3, [r7, #15]
          break;
 8004f92:	e005      	b.n	8004fa0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f94:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ef      	beq.n	8004f80 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	4904      	ldr	r1, [pc, #16]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000

08004fc4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fd2:	4b6a      	ldr	r3, [pc, #424]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d018      	beq.n	8005010 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fde:	4b67      	ldr	r3, [pc, #412]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0203 	and.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d10d      	bne.n	800500a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ff6:	4b61      	ldr	r3, [pc, #388]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
       ||
 8005006:	429a      	cmp	r2, r3
 8005008:	d047      	beq.n	800509a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
 800500e:	e044      	b.n	800509a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d018      	beq.n	800504a <RCCEx_PLLSAI2_Config+0x86>
 8005018:	2b03      	cmp	r3, #3
 800501a:	d825      	bhi.n	8005068 <RCCEx_PLLSAI2_Config+0xa4>
 800501c:	2b01      	cmp	r3, #1
 800501e:	d002      	beq.n	8005026 <RCCEx_PLLSAI2_Config+0x62>
 8005020:	2b02      	cmp	r3, #2
 8005022:	d009      	beq.n	8005038 <RCCEx_PLLSAI2_Config+0x74>
 8005024:	e020      	b.n	8005068 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005026:	4b55      	ldr	r3, [pc, #340]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11d      	bne.n	800506e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005036:	e01a      	b.n	800506e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005038:	4b50      	ldr	r3, [pc, #320]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005040:	2b00      	cmp	r3, #0
 8005042:	d116      	bne.n	8005072 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005048:	e013      	b.n	8005072 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800504a:	4b4c      	ldr	r3, [pc, #304]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10f      	bne.n	8005076 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005056:	4b49      	ldr	r3, [pc, #292]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005066:	e006      	b.n	8005076 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
      break;
 800506c:	e004      	b.n	8005078 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800506e:	bf00      	nop
 8005070:	e002      	b.n	8005078 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005072:	bf00      	nop
 8005074:	e000      	b.n	8005078 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005076:	bf00      	nop
    }

    if(status == HAL_OK)
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800507e:	4b3f      	ldr	r3, [pc, #252]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6819      	ldr	r1, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	430b      	orrs	r3, r1
 8005094:	4939      	ldr	r1, [pc, #228]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005096:	4313      	orrs	r3, r2
 8005098:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d167      	bne.n	8005170 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050a0:	4b36      	ldr	r3, [pc, #216]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a35      	ldr	r2, [pc, #212]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ac:	f7fd fc76 	bl	800299c <HAL_GetTick>
 80050b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050b2:	e009      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050b4:	f7fd fc72 	bl	800299c <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d902      	bls.n	80050c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	73fb      	strb	r3, [r7, #15]
        break;
 80050c6:	e005      	b.n	80050d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050c8:	4b2c      	ldr	r3, [pc, #176]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ef      	bne.n	80050b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d14a      	bne.n	8005170 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d111      	bne.n	8005104 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050e0:	4b26      	ldr	r3, [pc, #152]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6892      	ldr	r2, [r2, #8]
 80050f0:	0211      	lsls	r1, r2, #8
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68d2      	ldr	r2, [r2, #12]
 80050f6:	0912      	lsrs	r2, r2, #4
 80050f8:	0452      	lsls	r2, r2, #17
 80050fa:	430a      	orrs	r2, r1
 80050fc:	491f      	ldr	r1, [pc, #124]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	614b      	str	r3, [r1, #20]
 8005102:	e011      	b.n	8005128 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005104:	4b1d      	ldr	r3, [pc, #116]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800510c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6892      	ldr	r2, [r2, #8]
 8005114:	0211      	lsls	r1, r2, #8
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6912      	ldr	r2, [r2, #16]
 800511a:	0852      	lsrs	r2, r2, #1
 800511c:	3a01      	subs	r2, #1
 800511e:	0652      	lsls	r2, r2, #25
 8005120:	430a      	orrs	r2, r1
 8005122:	4916      	ldr	r1, [pc, #88]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005124:	4313      	orrs	r3, r2
 8005126:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005128:	4b14      	ldr	r3, [pc, #80]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a13      	ldr	r2, [pc, #76]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 800512e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005132:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005134:	f7fd fc32 	bl	800299c <HAL_GetTick>
 8005138:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800513a:	e009      	b.n	8005150 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800513c:	f7fd fc2e 	bl	800299c <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d902      	bls.n	8005150 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	73fb      	strb	r3, [r7, #15]
          break;
 800514e:	e005      	b.n	800515c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005150:	4b0a      	ldr	r3, [pc, #40]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ef      	beq.n	800513c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005164:	695a      	ldr	r2, [r3, #20]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	4904      	ldr	r1, [pc, #16]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 800516c:	4313      	orrs	r3, r2
 800516e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000

08005180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e040      	b.n	8005214 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fd fb04 	bl	80027b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2224      	movs	r2, #36	; 0x24
 80051ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f8c0 	bl	8005344 <UART_SetConfig>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e022      	b.n	8005214 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fb3e 	bl	8005858 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fbc5 	bl	800599c <UART_CheckIdleState>
 8005212:	4603      	mov	r3, r0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005230:	2b20      	cmp	r3, #32
 8005232:	f040 8082 	bne.w	800533a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <HAL_UART_Transmit+0x26>
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e07a      	b.n	800533c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_UART_Transmit+0x38>
 8005250:	2302      	movs	r3, #2
 8005252:	e073      	b.n	800533c <HAL_UART_Transmit+0x120>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2221      	movs	r2, #33	; 0x21
 8005268:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800526a:	f7fd fb97 	bl	800299c <HAL_GetTick>
 800526e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005288:	d108      	bne.n	800529c <HAL_UART_Transmit+0x80>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e003      	b.n	80052a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80052ac:	e02d      	b.n	800530a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2180      	movs	r1, #128	; 0x80
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fbb8 	bl	8005a2e <UART_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e039      	b.n	800533c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	881a      	ldrh	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052da:	b292      	uxth	r2, r2
 80052dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	3302      	adds	r3, #2
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	e008      	b.n	80052f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	b292      	uxth	r2, r2
 80052f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3301      	adds	r3, #1
 80052f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1cb      	bne.n	80052ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2200      	movs	r2, #0
 800531e:	2140      	movs	r1, #64	; 0x40
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fb84 	bl	8005a2e <UART_WaitOnFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e005      	b.n	800533c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e000      	b.n	800533c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800533a:	2302      	movs	r3, #2
  }
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005344:	b5b0      	push	{r4, r5, r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	4313      	orrs	r3, r2
 8005366:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4bad      	ldr	r3, [pc, #692]	; (8005624 <UART_SetConfig+0x2e0>)
 8005370:	4013      	ands	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	69f9      	ldr	r1, [r7, #28]
 8005378:	430b      	orrs	r3, r1
 800537a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4aa2      	ldr	r2, [pc, #648]	; (8005628 <UART_SetConfig+0x2e4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	430a      	orrs	r2, r1
 80053be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a99      	ldr	r2, [pc, #612]	; (800562c <UART_SetConfig+0x2e8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d121      	bne.n	800540e <UART_SetConfig+0xca>
 80053ca:	4b99      	ldr	r3, [pc, #612]	; (8005630 <UART_SetConfig+0x2ec>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d817      	bhi.n	8005408 <UART_SetConfig+0xc4>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <UART_SetConfig+0x9c>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	080053f1 	.word	0x080053f1
 80053e4:	080053fd 	.word	0x080053fd
 80053e8:	080053f7 	.word	0x080053f7
 80053ec:	08005403 	.word	0x08005403
 80053f0:	2301      	movs	r3, #1
 80053f2:	76fb      	strb	r3, [r7, #27]
 80053f4:	e0e7      	b.n	80055c6 <UART_SetConfig+0x282>
 80053f6:	2302      	movs	r3, #2
 80053f8:	76fb      	strb	r3, [r7, #27]
 80053fa:	e0e4      	b.n	80055c6 <UART_SetConfig+0x282>
 80053fc:	2304      	movs	r3, #4
 80053fe:	76fb      	strb	r3, [r7, #27]
 8005400:	e0e1      	b.n	80055c6 <UART_SetConfig+0x282>
 8005402:	2308      	movs	r3, #8
 8005404:	76fb      	strb	r3, [r7, #27]
 8005406:	e0de      	b.n	80055c6 <UART_SetConfig+0x282>
 8005408:	2310      	movs	r3, #16
 800540a:	76fb      	strb	r3, [r7, #27]
 800540c:	e0db      	b.n	80055c6 <UART_SetConfig+0x282>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a88      	ldr	r2, [pc, #544]	; (8005634 <UART_SetConfig+0x2f0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d132      	bne.n	800547e <UART_SetConfig+0x13a>
 8005418:	4b85      	ldr	r3, [pc, #532]	; (8005630 <UART_SetConfig+0x2ec>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	f003 030c 	and.w	r3, r3, #12
 8005422:	2b0c      	cmp	r3, #12
 8005424:	d828      	bhi.n	8005478 <UART_SetConfig+0x134>
 8005426:	a201      	add	r2, pc, #4	; (adr r2, 800542c <UART_SetConfig+0xe8>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	08005461 	.word	0x08005461
 8005430:	08005479 	.word	0x08005479
 8005434:	08005479 	.word	0x08005479
 8005438:	08005479 	.word	0x08005479
 800543c:	0800546d 	.word	0x0800546d
 8005440:	08005479 	.word	0x08005479
 8005444:	08005479 	.word	0x08005479
 8005448:	08005479 	.word	0x08005479
 800544c:	08005467 	.word	0x08005467
 8005450:	08005479 	.word	0x08005479
 8005454:	08005479 	.word	0x08005479
 8005458:	08005479 	.word	0x08005479
 800545c:	08005473 	.word	0x08005473
 8005460:	2300      	movs	r3, #0
 8005462:	76fb      	strb	r3, [r7, #27]
 8005464:	e0af      	b.n	80055c6 <UART_SetConfig+0x282>
 8005466:	2302      	movs	r3, #2
 8005468:	76fb      	strb	r3, [r7, #27]
 800546a:	e0ac      	b.n	80055c6 <UART_SetConfig+0x282>
 800546c:	2304      	movs	r3, #4
 800546e:	76fb      	strb	r3, [r7, #27]
 8005470:	e0a9      	b.n	80055c6 <UART_SetConfig+0x282>
 8005472:	2308      	movs	r3, #8
 8005474:	76fb      	strb	r3, [r7, #27]
 8005476:	e0a6      	b.n	80055c6 <UART_SetConfig+0x282>
 8005478:	2310      	movs	r3, #16
 800547a:	76fb      	strb	r3, [r7, #27]
 800547c:	e0a3      	b.n	80055c6 <UART_SetConfig+0x282>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a6d      	ldr	r2, [pc, #436]	; (8005638 <UART_SetConfig+0x2f4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d120      	bne.n	80054ca <UART_SetConfig+0x186>
 8005488:	4b69      	ldr	r3, [pc, #420]	; (8005630 <UART_SetConfig+0x2ec>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005492:	2b30      	cmp	r3, #48	; 0x30
 8005494:	d013      	beq.n	80054be <UART_SetConfig+0x17a>
 8005496:	2b30      	cmp	r3, #48	; 0x30
 8005498:	d814      	bhi.n	80054c4 <UART_SetConfig+0x180>
 800549a:	2b20      	cmp	r3, #32
 800549c:	d009      	beq.n	80054b2 <UART_SetConfig+0x16e>
 800549e:	2b20      	cmp	r3, #32
 80054a0:	d810      	bhi.n	80054c4 <UART_SetConfig+0x180>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <UART_SetConfig+0x168>
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d006      	beq.n	80054b8 <UART_SetConfig+0x174>
 80054aa:	e00b      	b.n	80054c4 <UART_SetConfig+0x180>
 80054ac:	2300      	movs	r3, #0
 80054ae:	76fb      	strb	r3, [r7, #27]
 80054b0:	e089      	b.n	80055c6 <UART_SetConfig+0x282>
 80054b2:	2302      	movs	r3, #2
 80054b4:	76fb      	strb	r3, [r7, #27]
 80054b6:	e086      	b.n	80055c6 <UART_SetConfig+0x282>
 80054b8:	2304      	movs	r3, #4
 80054ba:	76fb      	strb	r3, [r7, #27]
 80054bc:	e083      	b.n	80055c6 <UART_SetConfig+0x282>
 80054be:	2308      	movs	r3, #8
 80054c0:	76fb      	strb	r3, [r7, #27]
 80054c2:	e080      	b.n	80055c6 <UART_SetConfig+0x282>
 80054c4:	2310      	movs	r3, #16
 80054c6:	76fb      	strb	r3, [r7, #27]
 80054c8:	e07d      	b.n	80055c6 <UART_SetConfig+0x282>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a5b      	ldr	r2, [pc, #364]	; (800563c <UART_SetConfig+0x2f8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d120      	bne.n	8005516 <UART_SetConfig+0x1d2>
 80054d4:	4b56      	ldr	r3, [pc, #344]	; (8005630 <UART_SetConfig+0x2ec>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054de:	2bc0      	cmp	r3, #192	; 0xc0
 80054e0:	d013      	beq.n	800550a <UART_SetConfig+0x1c6>
 80054e2:	2bc0      	cmp	r3, #192	; 0xc0
 80054e4:	d814      	bhi.n	8005510 <UART_SetConfig+0x1cc>
 80054e6:	2b80      	cmp	r3, #128	; 0x80
 80054e8:	d009      	beq.n	80054fe <UART_SetConfig+0x1ba>
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	d810      	bhi.n	8005510 <UART_SetConfig+0x1cc>
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <UART_SetConfig+0x1b4>
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d006      	beq.n	8005504 <UART_SetConfig+0x1c0>
 80054f6:	e00b      	b.n	8005510 <UART_SetConfig+0x1cc>
 80054f8:	2300      	movs	r3, #0
 80054fa:	76fb      	strb	r3, [r7, #27]
 80054fc:	e063      	b.n	80055c6 <UART_SetConfig+0x282>
 80054fe:	2302      	movs	r3, #2
 8005500:	76fb      	strb	r3, [r7, #27]
 8005502:	e060      	b.n	80055c6 <UART_SetConfig+0x282>
 8005504:	2304      	movs	r3, #4
 8005506:	76fb      	strb	r3, [r7, #27]
 8005508:	e05d      	b.n	80055c6 <UART_SetConfig+0x282>
 800550a:	2308      	movs	r3, #8
 800550c:	76fb      	strb	r3, [r7, #27]
 800550e:	e05a      	b.n	80055c6 <UART_SetConfig+0x282>
 8005510:	2310      	movs	r3, #16
 8005512:	76fb      	strb	r3, [r7, #27]
 8005514:	e057      	b.n	80055c6 <UART_SetConfig+0x282>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a49      	ldr	r2, [pc, #292]	; (8005640 <UART_SetConfig+0x2fc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d125      	bne.n	800556c <UART_SetConfig+0x228>
 8005520:	4b43      	ldr	r3, [pc, #268]	; (8005630 <UART_SetConfig+0x2ec>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800552e:	d017      	beq.n	8005560 <UART_SetConfig+0x21c>
 8005530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005534:	d817      	bhi.n	8005566 <UART_SetConfig+0x222>
 8005536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553a:	d00b      	beq.n	8005554 <UART_SetConfig+0x210>
 800553c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005540:	d811      	bhi.n	8005566 <UART_SetConfig+0x222>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <UART_SetConfig+0x20a>
 8005546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800554a:	d006      	beq.n	800555a <UART_SetConfig+0x216>
 800554c:	e00b      	b.n	8005566 <UART_SetConfig+0x222>
 800554e:	2300      	movs	r3, #0
 8005550:	76fb      	strb	r3, [r7, #27]
 8005552:	e038      	b.n	80055c6 <UART_SetConfig+0x282>
 8005554:	2302      	movs	r3, #2
 8005556:	76fb      	strb	r3, [r7, #27]
 8005558:	e035      	b.n	80055c6 <UART_SetConfig+0x282>
 800555a:	2304      	movs	r3, #4
 800555c:	76fb      	strb	r3, [r7, #27]
 800555e:	e032      	b.n	80055c6 <UART_SetConfig+0x282>
 8005560:	2308      	movs	r3, #8
 8005562:	76fb      	strb	r3, [r7, #27]
 8005564:	e02f      	b.n	80055c6 <UART_SetConfig+0x282>
 8005566:	2310      	movs	r3, #16
 8005568:	76fb      	strb	r3, [r7, #27]
 800556a:	e02c      	b.n	80055c6 <UART_SetConfig+0x282>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2d      	ldr	r2, [pc, #180]	; (8005628 <UART_SetConfig+0x2e4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d125      	bne.n	80055c2 <UART_SetConfig+0x27e>
 8005576:	4b2e      	ldr	r3, [pc, #184]	; (8005630 <UART_SetConfig+0x2ec>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005584:	d017      	beq.n	80055b6 <UART_SetConfig+0x272>
 8005586:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800558a:	d817      	bhi.n	80055bc <UART_SetConfig+0x278>
 800558c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005590:	d00b      	beq.n	80055aa <UART_SetConfig+0x266>
 8005592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005596:	d811      	bhi.n	80055bc <UART_SetConfig+0x278>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <UART_SetConfig+0x260>
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a0:	d006      	beq.n	80055b0 <UART_SetConfig+0x26c>
 80055a2:	e00b      	b.n	80055bc <UART_SetConfig+0x278>
 80055a4:	2300      	movs	r3, #0
 80055a6:	76fb      	strb	r3, [r7, #27]
 80055a8:	e00d      	b.n	80055c6 <UART_SetConfig+0x282>
 80055aa:	2302      	movs	r3, #2
 80055ac:	76fb      	strb	r3, [r7, #27]
 80055ae:	e00a      	b.n	80055c6 <UART_SetConfig+0x282>
 80055b0:	2304      	movs	r3, #4
 80055b2:	76fb      	strb	r3, [r7, #27]
 80055b4:	e007      	b.n	80055c6 <UART_SetConfig+0x282>
 80055b6:	2308      	movs	r3, #8
 80055b8:	76fb      	strb	r3, [r7, #27]
 80055ba:	e004      	b.n	80055c6 <UART_SetConfig+0x282>
 80055bc:	2310      	movs	r3, #16
 80055be:	76fb      	strb	r3, [r7, #27]
 80055c0:	e001      	b.n	80055c6 <UART_SetConfig+0x282>
 80055c2:	2310      	movs	r3, #16
 80055c4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a17      	ldr	r2, [pc, #92]	; (8005628 <UART_SetConfig+0x2e4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	f040 8087 	bne.w	80056e0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055d2:	7efb      	ldrb	r3, [r7, #27]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d837      	bhi.n	8005648 <UART_SetConfig+0x304>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <UART_SetConfig+0x29c>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	08005605 	.word	0x08005605
 80055e4:	08005649 	.word	0x08005649
 80055e8:	0800560d 	.word	0x0800560d
 80055ec:	08005649 	.word	0x08005649
 80055f0:	08005613 	.word	0x08005613
 80055f4:	08005649 	.word	0x08005649
 80055f8:	08005649 	.word	0x08005649
 80055fc:	08005649 	.word	0x08005649
 8005600:	0800561b 	.word	0x0800561b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005604:	f7ff f874 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8005608:	6178      	str	r0, [r7, #20]
        break;
 800560a:	e022      	b.n	8005652 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800560c:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <UART_SetConfig+0x300>)
 800560e:	617b      	str	r3, [r7, #20]
        break;
 8005610:	e01f      	b.n	8005652 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005612:	f7fe ffd5 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8005616:	6178      	str	r0, [r7, #20]
        break;
 8005618:	e01b      	b.n	8005652 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561e:	617b      	str	r3, [r7, #20]
        break;
 8005620:	e017      	b.n	8005652 <UART_SetConfig+0x30e>
 8005622:	bf00      	nop
 8005624:	efff69f3 	.word	0xefff69f3
 8005628:	40008000 	.word	0x40008000
 800562c:	40013800 	.word	0x40013800
 8005630:	40021000 	.word	0x40021000
 8005634:	40004400 	.word	0x40004400
 8005638:	40004800 	.word	0x40004800
 800563c:	40004c00 	.word	0x40004c00
 8005640:	40005000 	.word	0x40005000
 8005644:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	76bb      	strb	r3, [r7, #26]
        break;
 8005650:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80f1 	beq.w	800583c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	4413      	add	r3, r2
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	429a      	cmp	r2, r3
 8005668:	d305      	bcc.n	8005676 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	429a      	cmp	r2, r3
 8005674:	d902      	bls.n	800567c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	76bb      	strb	r3, [r7, #26]
 800567a:	e0df      	b.n	800583c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	4618      	mov	r0, r3
 8005680:	f04f 0100 	mov.w	r1, #0
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	020b      	lsls	r3, r1, #8
 800568e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005692:	0202      	lsls	r2, r0, #8
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	6849      	ldr	r1, [r1, #4]
 8005698:	0849      	lsrs	r1, r1, #1
 800569a:	4608      	mov	r0, r1
 800569c:	f04f 0100 	mov.w	r1, #0
 80056a0:	1814      	adds	r4, r2, r0
 80056a2:	eb43 0501 	adc.w	r5, r3, r1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	4620      	mov	r0, r4
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7fb fec0 	bl	8001438 <__aeabi_uldivmod>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4613      	mov	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056c6:	d308      	bcc.n	80056da <UART_SetConfig+0x396>
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ce:	d204      	bcs.n	80056da <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	60da      	str	r2, [r3, #12]
 80056d8:	e0b0      	b.n	800583c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	76bb      	strb	r3, [r7, #26]
 80056de:	e0ad      	b.n	800583c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e8:	d15b      	bne.n	80057a2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80056ea:	7efb      	ldrb	r3, [r7, #27]
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d828      	bhi.n	8005742 <UART_SetConfig+0x3fe>
 80056f0:	a201      	add	r2, pc, #4	; (adr r2, 80056f8 <UART_SetConfig+0x3b4>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	0800571d 	.word	0x0800571d
 80056fc:	08005725 	.word	0x08005725
 8005700:	0800572d 	.word	0x0800572d
 8005704:	08005743 	.word	0x08005743
 8005708:	08005733 	.word	0x08005733
 800570c:	08005743 	.word	0x08005743
 8005710:	08005743 	.word	0x08005743
 8005714:	08005743 	.word	0x08005743
 8005718:	0800573b 	.word	0x0800573b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800571c:	f7fe ffe8 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8005720:	6178      	str	r0, [r7, #20]
        break;
 8005722:	e013      	b.n	800574c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005724:	f7fe fffa 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 8005728:	6178      	str	r0, [r7, #20]
        break;
 800572a:	e00f      	b.n	800574c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800572c:	4b49      	ldr	r3, [pc, #292]	; (8005854 <UART_SetConfig+0x510>)
 800572e:	617b      	str	r3, [r7, #20]
        break;
 8005730:	e00c      	b.n	800574c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005732:	f7fe ff45 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8005736:	6178      	str	r0, [r7, #20]
        break;
 8005738:	e008      	b.n	800574c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800573a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800573e:	617b      	str	r3, [r7, #20]
        break;
 8005740:	e004      	b.n	800574c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	76bb      	strb	r3, [r7, #26]
        break;
 800574a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d074      	beq.n	800583c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	005a      	lsls	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	085b      	lsrs	r3, r3, #1
 800575c:	441a      	add	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	fbb2 f3f3 	udiv	r3, r2, r3
 8005766:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	2b0f      	cmp	r3, #15
 800576c:	d916      	bls.n	800579c <UART_SetConfig+0x458>
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005774:	d212      	bcs.n	800579c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f023 030f 	bic.w	r3, r3, #15
 800577e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	085b      	lsrs	r3, r3, #1
 8005784:	b29b      	uxth	r3, r3
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	b29a      	uxth	r2, r3
 800578c:	89fb      	ldrh	r3, [r7, #14]
 800578e:	4313      	orrs	r3, r2
 8005790:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	89fa      	ldrh	r2, [r7, #14]
 8005798:	60da      	str	r2, [r3, #12]
 800579a:	e04f      	b.n	800583c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	76bb      	strb	r3, [r7, #26]
 80057a0:	e04c      	b.n	800583c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057a2:	7efb      	ldrb	r3, [r7, #27]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d828      	bhi.n	80057fa <UART_SetConfig+0x4b6>
 80057a8:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <UART_SetConfig+0x46c>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	080057d5 	.word	0x080057d5
 80057b4:	080057dd 	.word	0x080057dd
 80057b8:	080057e5 	.word	0x080057e5
 80057bc:	080057fb 	.word	0x080057fb
 80057c0:	080057eb 	.word	0x080057eb
 80057c4:	080057fb 	.word	0x080057fb
 80057c8:	080057fb 	.word	0x080057fb
 80057cc:	080057fb 	.word	0x080057fb
 80057d0:	080057f3 	.word	0x080057f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d4:	f7fe ff8c 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 80057d8:	6178      	str	r0, [r7, #20]
        break;
 80057da:	e013      	b.n	8005804 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057dc:	f7fe ff9e 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 80057e0:	6178      	str	r0, [r7, #20]
        break;
 80057e2:	e00f      	b.n	8005804 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e4:	4b1b      	ldr	r3, [pc, #108]	; (8005854 <UART_SetConfig+0x510>)
 80057e6:	617b      	str	r3, [r7, #20]
        break;
 80057e8:	e00c      	b.n	8005804 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ea:	f7fe fee9 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 80057ee:	6178      	str	r0, [r7, #20]
        break;
 80057f0:	e008      	b.n	8005804 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057f6:	617b      	str	r3, [r7, #20]
        break;
 80057f8:	e004      	b.n	8005804 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	76bb      	strb	r3, [r7, #26]
        break;
 8005802:	bf00      	nop
    }

    if (pclk != 0U)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d018      	beq.n	800583c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	085a      	lsrs	r2, r3, #1
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	441a      	add	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b0f      	cmp	r3, #15
 8005822:	d909      	bls.n	8005838 <UART_SetConfig+0x4f4>
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582a:	d205      	bcs.n	8005838 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	e001      	b.n	800583c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005848:	7ebb      	ldrb	r3, [r7, #26]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bdb0      	pop	{r4, r5, r7, pc}
 8005852:	bf00      	nop
 8005854:	00f42400 	.word	0x00f42400

08005858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01a      	beq.n	800596e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005956:	d10a      	bne.n	800596e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]
  }
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059ac:	f7fc fff6 	bl	800299c <HAL_GetTick>
 80059b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d10e      	bne.n	80059de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f82d 	bl	8005a2e <UART_WaitOnFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e023      	b.n	8005a26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d10e      	bne.n	8005a0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f817 	bl	8005a2e <UART_WaitOnFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e00d      	b.n	8005a26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b09c      	sub	sp, #112	; 0x70
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a3e:	e0a5      	b.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a46:	f000 80a1 	beq.w	8005b8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4a:	f7fc ffa7 	bl	800299c <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d13e      	bne.n	8005ade <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a74:	667b      	str	r3, [r7, #100]	; 0x64
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e6      	bne.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ab2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ab4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e067      	b.n	8005bae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d04f      	beq.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005afa:	d147      	bne.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b04:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
 8005b26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e6      	bne.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	613b      	str	r3, [r7, #16]
   return(result);
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b58:	623a      	str	r2, [r7, #32]
 8005b5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	69f9      	ldr	r1, [r7, #28]
 8005b5e:	6a3a      	ldr	r2, [r7, #32]
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e5      	bne.n	8005b38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e010      	b.n	8005bae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	69da      	ldr	r2, [r3, #28]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	4013      	ands	r3, r2
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	bf0c      	ite	eq
 8005b9c:	2301      	moveq	r3, #1
 8005b9e:	2300      	movne	r3, #0
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	f43f af4a 	beq.w	8005a40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3770      	adds	r7, #112	; 0x70
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <_init>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr

08005bc4 <_fini>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	bf00      	nop
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr
